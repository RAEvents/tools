{
  "version": 3,
  "sources": ["../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+_665f150758de036fa276ad3dadbe21e4/node_modules/@retroachievements/api/src/utils/internal/apiBaseUrl.ts", "../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+_665f150758de036fa276ad3dadbe21e4/node_modules/@retroachievements/api/src/utils/internal/buildRequestUrl.ts", "../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+_665f150758de036fa276ad3dadbe21e4/node_modules/@retroachievements/api/src/utils/internal/call.ts", "../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+_665f150758de036fa276ad3dadbe21e4/node_modules/@retroachievements/api/src/utils/internal/serializeProperties.ts", "../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+_665f150758de036fa276ad3dadbe21e4/node_modules/@retroachievements/api/src/achievement/getAchievementUnlocks.ts", "../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+_665f150758de036fa276ad3dadbe21e4/node_modules/@retroachievements/api/src/console/getConsoleIds.ts", "../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+_665f150758de036fa276ad3dadbe21e4/node_modules/@retroachievements/api/src/console/getGameList.ts", "../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+_665f150758de036fa276ad3dadbe21e4/node_modules/@retroachievements/api/src/feed/getAchievementOfTheWeek.ts", "../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+_665f150758de036fa276ad3dadbe21e4/node_modules/@retroachievements/api/src/feed/getActiveClaims.ts", "../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+_665f150758de036fa276ad3dadbe21e4/node_modules/@retroachievements/api/src/feed/getClaims.ts", "../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+_665f150758de036fa276ad3dadbe21e4/node_modules/@retroachievements/api/src/feed/getRecentGameAwards.ts", "../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+_665f150758de036fa276ad3dadbe21e4/node_modules/@retroachievements/api/src/feed/getTopTenUsers.ts", "../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+_665f150758de036fa276ad3dadbe21e4/node_modules/@retroachievements/api/src/feed/models/claim-set-type.enum.ts", "../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+_665f150758de036fa276ad3dadbe21e4/node_modules/@retroachievements/api/src/feed/models/claim-status.enum.ts", "../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+_665f150758de036fa276ad3dadbe21e4/node_modules/@retroachievements/api/src/feed/models/claim-type.enum.ts", "../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+_665f150758de036fa276ad3dadbe21e4/node_modules/@retroachievements/api/src/game/getAchievementCount.ts", "../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+_665f150758de036fa276ad3dadbe21e4/node_modules/@retroachievements/api/src/game/getAchievementDistribution.ts", "../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+_665f150758de036fa276ad3dadbe21e4/node_modules/@retroachievements/api/src/game/getGame.ts", "../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+_665f150758de036fa276ad3dadbe21e4/node_modules/@retroachievements/api/src/game/getGameExtended.ts", "../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+_665f150758de036fa276ad3dadbe21e4/node_modules/@retroachievements/api/src/game/getGameRankAndScore.ts", "../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+_665f150758de036fa276ad3dadbe21e4/node_modules/@retroachievements/api/src/game/getGameRating.ts", "../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+_665f150758de036fa276ad3dadbe21e4/node_modules/@retroachievements/api/src/game/models/achievement-distribution-flags.enum.ts", "../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+_665f150758de036fa276ad3dadbe21e4/node_modules/@retroachievements/api/src/game/models/get-game-extended-response.model.ts", "../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+_665f150758de036fa276ad3dadbe21e4/node_modules/@retroachievements/api/src/ticket/getTicketData.ts", "../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+_665f150758de036fa276ad3dadbe21e4/node_modules/@retroachievements/api/src/user/getAchievementsEarnedBetween.ts", "../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+_665f150758de036fa276ad3dadbe21e4/node_modules/@retroachievements/api/src/user/getAchievementsEarnedOnDay.ts", "../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+_665f150758de036fa276ad3dadbe21e4/node_modules/@retroachievements/api/src/user/getGameInfoAndUserProgress.ts", "../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+_665f150758de036fa276ad3dadbe21e4/node_modules/@retroachievements/api/src/user/getUserAwards.ts", "../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+_665f150758de036fa276ad3dadbe21e4/node_modules/@retroachievements/api/src/user/getUserClaims.ts", "../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+_665f150758de036fa276ad3dadbe21e4/node_modules/@retroachievements/api/src/user/getUserCompletedGames.ts", "../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+_665f150758de036fa276ad3dadbe21e4/node_modules/@retroachievements/api/src/user/getUserCompletionProgress.ts", "../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+_665f150758de036fa276ad3dadbe21e4/node_modules/@retroachievements/api/src/user/getUserGameRankAndScore.ts", "../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+_665f150758de036fa276ad3dadbe21e4/node_modules/@retroachievements/api/src/user/getUserPoints.ts", "../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+_665f150758de036fa276ad3dadbe21e4/node_modules/@retroachievements/api/src/user/getUserProfile.ts", "../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+_665f150758de036fa276ad3dadbe21e4/node_modules/@retroachievements/api/src/user/getUserProgress.ts", "../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+_665f150758de036fa276ad3dadbe21e4/node_modules/@retroachievements/api/src/user/getUserRecentAchievements.ts", "../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+_665f150758de036fa276ad3dadbe21e4/node_modules/@retroachievements/api/src/user/getUserRecentlyPlayedGames.ts", "../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+_665f150758de036fa276ad3dadbe21e4/node_modules/@retroachievements/api/src/user/getUserSummary.ts", "../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+_665f150758de036fa276ad3dadbe21e4/node_modules/@retroachievements/api/src/utils/public/buildAuthorization.ts", "../src/compression.js", "../src/options.js", "../src/api.js", "../src/app.js"],
  "sourcesContent": ["export const apiBaseUrl = \"https://retroachievements.org/API\";\n", "import type { AuthObject } from \"../public/models\";\n\nexport const buildRequestUrl = (\n  baseUrl: string,\n  endpointUrl: string,\n  authObject: AuthObject,\n  args: Record<string, string | number> = {}\n) => {\n  const concatenated = `${baseUrl}/${endpointUrl}`;\n  const withoutDoubleSlashes = concatenated.replaceAll(/([^:]\\/)\\/+/g, \"$1\");\n\n  let withArgs = withoutDoubleSlashes;\n\n  // `z` and `y` are expected query params from the RA API.\n  // Authentication is handled purely by query params.\n  const queryParamValues: Record<string, string> = {\n    z: authObject.username,\n    y: authObject.webApiKey,\n  };\n\n  for (const [argKey, argValue] of Object.entries(args)) {\n    // \"abc.com/some-route/:foo/some-path\" & {\"foo\": 4} --> \"abc.com/some-route/4/some-path\"\n    if (withArgs.includes(`:${argKey}`)) {\n      withArgs = withArgs.replace(`:${argKey}`, String(argValue));\n    } else if (argValue !== undefined) {\n      queryParamValues[argKey] = String(argValue);\n    }\n  }\n\n  const queryString = new URLSearchParams(queryParamValues).toString();\n  return `${withArgs}?${queryString}`;\n};\n", "declare const PACKAGE_VERSION: string | undefined;\n\n/**\n * Fetch an HTTP resource. This is publicly exposed in the\n * event you would like to access an endpoint that this\n * library does not currently support.\n *\n * UNLESS YOU'RE SURE OF WHAT YOU'RE DOING, YOU PROBABLY\n * SHOULDN'T USE THIS FUNCTION.\n */\nexport const call = async <\n  T extends readonly any[] | Record<string, any>\n>(config: {\n  url: string;\n}) => {\n  const { url } = config;\n\n  const headers = new Headers({\n    \"User-Agent\": `RetroAchievements-api-js/${PACKAGE_VERSION ?? \"Unknown\"}`,\n  });\n\n  const rawResponse = await fetch(url, (typeof window !== undefined) ? {} : { headers });\n\n  if (!rawResponse.ok) {\n    throw new Error(\n      `HTTP Error: Status ${rawResponse.status} ${rawResponse.statusText}`\n    );\n  }\n\n  return (await rawResponse.json()) as T;\n};\n", "/* eslint-disable sonarjs/cognitive-complexity */\n/* eslint-disable sonarjs/prefer-immediate-return */\n\nexport const serializeProperties = (\n  originalData: any,\n  options: Partial<{\n    shouldCastToNumbers: string[];\n    shouldMapToBooleans: string[];\n  }> = {}\n) => {\n  const { shouldCastToNumbers, shouldMapToBooleans } = options;\n\n  let returnValue = originalData;\n\n  if (Array.isArray(originalData)) {\n    const cleanedArray: any[] = [];\n\n    for (const entity of originalData) {\n      cleanedArray.push(serializeProperties(entity, options));\n    }\n\n    returnValue = cleanedArray;\n  } else if (!Array.isArray(originalData) && originalData instanceof Object) {\n    let cleanedObject: Record<string, any> = {};\n\n    for (const [originalKey, originalValue] of Object.entries(originalData)) {\n      let sanitizedValue = originalValue;\n      if (shouldCastToNumbers?.includes(originalKey)) {\n        sanitizedValue = originalValue === null ? null : Number(originalValue);\n      }\n\n      if (shouldMapToBooleans?.includes(originalKey)) {\n        if (originalValue === null) {\n          sanitizedValue = null;\n        } else {\n          sanitizedValue = String(originalValue) === \"1\" ? true : false;\n        }\n      }\n\n      cleanedObject = {\n        ...cleanedObject,\n        [naiveCamelCase(originalKey)]: serializeProperties(\n          sanitizedValue,\n          options\n        ),\n      };\n    }\n\n    returnValue = cleanedObject;\n  }\n\n  return returnValue;\n};\n\nconst naiveCamelCase = (originalValue: string) => {\n  // \"ID\" --> \"id\", \"URL\" --> \"url\"\n  if (originalValue.toUpperCase() === originalValue) {\n    return originalValue.toLowerCase();\n  }\n\n  // \"GameID\" -> \"gameID\"\n  let camelCased =\n    originalValue.charAt(0).toLowerCase() + originalValue.slice(1);\n\n  // \"gameID\" -> \"gameId\"\n  camelCased = camelCased.replaceAll(\"ID\", \"Id\");\n\n  // \"badgeURL\" --> \"badgeUrl\"\n  camelCased = camelCased.replaceAll(\"URL\", \"Url\");\n\n  // \"rAPoints\" -> \"raPoints\"\n  camelCased = camelCased.replaceAll(\"rA\", \"ra\");\n\n  // \"visibleUserawards\" -> \"visibleUserAwards\"\n  camelCased = camelCased.replaceAll(\"visibleUserawards\", \"visibleUserAwards\");\n\n  return camelCased;\n};\n", "import type { ID } from \"../utils/internal\";\nimport {\n  apiBaseUrl,\n  buildRequestUrl,\n  call,\n  serializeProperties,\n} from \"../utils/internal\";\nimport type { AuthObject } from \"../utils/public\";\nimport type {\n  AchievementUnlocksMetadata,\n  GetAchievementUnlocksResponse,\n} from \"./models\";\n\n/**\n * A call to this function will retrieve a list of users who\n * have earned a given achievement, targeted by the achievement's ID.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @param payload.achievementId The target achievement we want to\n * retrieve the unlocks list for. If unknown, this can be found\n * by navigating to the achievement's page on the RetroAchievements.org\n * website. eg: https://retroachievements.org/achievement/13876 has an\n * ID of 13876.\n *\n * @param payload.offset Defaults to 0. The number of entries to skip.\n *\n * @param payload.count Defaults to 50, has a max of 500.\n *\n * @example\n * ```\n * const achievementUnlocks = await getAchievementUnlocks(\n *   authorization,\n *   { achievementId: 13876 }\n * );\n * ```\n *\n * @returns An array containing metadata about unlocks for\n * the target achievement.\n * ```\n * [\n *   {\n *     user: 'Podgicus0305',\n *     raPoints: 15544,\n *     dateAwarded: '2022-07-12 19:06:34',\n *     hardcoreMode: true\n *   }\n * ]\n * ```\n */\nexport const getAchievementUnlocks = async (\n  authorization: AuthObject,\n  payload: { achievementId: ID; offset?: number; count?: number }\n): Promise<AchievementUnlocksMetadata> => {\n  const { achievementId, offset, count } = payload;\n\n  const queryParams: Record<string, number | string> = { a: achievementId };\n\n  if (offset) {\n    queryParams.o = offset;\n  }\n\n  if (count) {\n    queryParams.c = count;\n  }\n\n  const url = buildRequestUrl(\n    apiBaseUrl,\n    \"/API_GetAchievementUnlocks.php\",\n    authorization,\n    queryParams\n  );\n\n  const rawResponse = await call<GetAchievementUnlocksResponse>({ url });\n\n  return serializeProperties(rawResponse, {\n    shouldCastToNumbers: [\n      \"ID\",\n      \"Points\",\n      \"TrueRatio\",\n      \"RAPoints\",\n      \"RASoftcorePoints\",\n    ],\n    shouldMapToBooleans: [\"HardcoreMode\"],\n  });\n};\n", "import {\n  apiBaseUrl,\n  buildRequestUrl,\n  call,\n  serializeProperties,\n} from \"../utils/internal\";\nimport type { AuthObject } from \"../utils/public\";\nimport type { FetchedSystem, GetConsoleIdsResponse } from \"./models\";\n\n/**\n * A call to this function will retrieve the complete list\n * of console ID and name pairs on the RetroAchievements.org\n * platform.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @param payload.shouldOnlyRetrieveActiveSystems If true, only systems that\n * officially support achievements will be returned.\n *\n * @param payload.shouldOnlyRetrieveGameSystems If true, events and hubs will\n * not be returned.\n *\n * @example\n * ```\n * const consoleIds = await getConsoleIds(authorization);\n * ```\n *\n * @returns An array containing a complete list of console ID\n * and name pairs for RetroAchievements.org.\n * ```json\n * {\n *   id: \"1\",\n *   name: \"Mega Drive\",\n *   iconUrl: \"https://static.retroachievements.org/assets/images/system/md.png\",\n *   active: true,\n *   isGameSystem: true\n * }\n * ```\n */\nexport const getConsoleIds = async (\n  authorization: AuthObject,\n  payload?: {\n    shouldOnlyRetrieveActiveSystems: boolean;\n    shouldOnlyRetrieveGameSystems: boolean;\n  }\n): Promise<FetchedSystem[]> => {\n  let callPayload: Record<string, any> | undefined;\n\n  if (payload?.shouldOnlyRetrieveActiveSystems) {\n    callPayload = { ...callPayload, a: 1 };\n  }\n  if (payload?.shouldOnlyRetrieveGameSystems) {\n    callPayload = { ...callPayload, g: 1 };\n  }\n\n  const url = buildRequestUrl(\n    apiBaseUrl,\n    \"/API_GetConsoleIDs.php\",\n    authorization,\n    callPayload\n  );\n\n  const rawResponse = await call<GetConsoleIdsResponse>({ url });\n\n  return serializeProperties(rawResponse, {\n    shouldCastToNumbers: [\"ID\"],\n  });\n};\n", "import type { ID } from \"../utils/internal\";\nimport {\n  apiBaseUrl,\n  buildRequestUrl,\n  call,\n  serializeProperties,\n} from \"../utils/internal\";\nimport type { AuthObject } from \"../utils/public\";\nimport type { GameList, GetGameListResponse } from \"./models\";\n/**\n * A call to this function will retrieve the complete list\n * of games for a specified console on the RetroAchievements.org\n * platform.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @param payload.consoleId The unique console ID to retrieve a list of\n * games from. The list of consoleIds can be retrieved using the `getConsoleIds()`\n * function provided by this library.\n *\n * @param payload.shouldOnlyRetrieveGamesWithAchievements If truthy, will not\n * return games that do not have achievements.\n *\n * @param payload.shouldRetrieveGameHashes If truthy, will return valid\n * hashes for game ROMs in an array attached to each game in the list.\n *\n * @example\n * ```\n * const gameList = await getGameList(\n *   authorization,\n *   { consoleId: 1, shouldOnlyRetrieveGamesWithAchievements: true }\n * );\n * ```\n *\n * @returns An array containing a list of games for a given consoleId.\n * ```\n * [\n *   {\n *     title: \"Elemental Master\",\n *     id: 4247,\n *     consoleId: 1,\n *     consoleName: \"Mega Drive\",\n *     imageIcon: \"/Images/048245.png\",\n *     numAchievements: 44,\n *     numLeaderboards: 0,\n *     points: 500,\n *     dateModified: \"2021-12-09 17:05:39\",\n *     forumTopicId: 1972,\n *     hashes: [\"32e1a15161ef1f070b023738353bde51\"]\n *   }\n * ]\n * ```\n */\nexport const getGameList = async (\n  authorization: AuthObject,\n  payload: {\n    consoleId: ID;\n    shouldOnlyRetrieveGamesWithAchievements?: boolean;\n    shouldRetrieveGameHashes?: boolean;\n  }\n): Promise<GameList> => {\n  const {\n    consoleId,\n    shouldOnlyRetrieveGamesWithAchievements,\n    shouldRetrieveGameHashes,\n  } = payload;\n\n  let callPayload: Record<string, any> = { i: consoleId };\n\n  if (shouldOnlyRetrieveGamesWithAchievements !== undefined) {\n    callPayload = {\n      ...callPayload,\n      f: shouldOnlyRetrieveGamesWithAchievements ? 1 : 0,\n    };\n  }\n\n  if (shouldRetrieveGameHashes) {\n    callPayload = { ...callPayload, h: shouldRetrieveGameHashes ? 1 : 0 };\n  }\n\n  const url = buildRequestUrl(\n    apiBaseUrl,\n    \"/API_GetGameList.php\",\n    authorization,\n    callPayload\n  );\n\n  const rawResponse = await call<GetGameListResponse>({ url });\n\n  return serializeProperties(rawResponse, {\n    shouldCastToNumbers: [\"ID\", \"ConsoleID\"],\n  });\n};\n", "import {\n  apiBaseUrl,\n  buildRequestUrl,\n  call,\n  serializeProperties,\n} from \"../utils/internal\";\nimport type { AuthObject } from \"../utils/public\";\nimport type {\n  AchievementOfTheWeek,\n  GetAchievementOfTheWeekResponse,\n} from \"./models\";\n\n/**\n * A call to this function will retrieve comprehensive\n * metadata about the current Achievement of the Week.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @example\n * ```\n * const achievementOfTheWeek = await getAchievementOfTheWeek(\n *   authorization\n * );\n * ```\n *\n * @returns An object containing comprehensive metadata\n * about the current Achievement of the Week.\n * ```\n * {\n *   achievement: {\n *     id: \"165062\",\n *     title: \"The True Hero\",\n *     description: \"Receive any Ending as Han [Normal or Hard]\",\n *     points: \"10\",\n *     trueRatio: \"22\",\n *     author: \"BigWeedSmokerMan\",\n *     dateCreated: \"2021-08-08 17:47:46\",\n *     dateModified: \"2021-08-09 12:20:05\",\n *     badgeName: \"185805\",\n *     badgeUrl: \"/Badge/185805.png\"\n *   },\n *   console: { id: \"39\", title: \"Saturn\" },\n *   forumTopic: { id: \"14767\" },\n *   game: { id: \"14513\", title: \"Guardian Heroes\" },\n *   startAt: \"2022-10-10 00:00:00\",\n *   totalPlayers: \"219\",\n *   unlocks: [\n *     {\n *       user: \"Tirbaba2\",\n *       raPoints: \"72\",\n *       raSoftcorePoints: \"72\",\n *       dateAwarded: \"2022-10-10 01:42:19\",\n *       hardcoreMode: \"1\"\n *     }\n *   ],\n *   unlocksCount: \"40\"\n * }\n * ```\n */\nexport const getAchievementOfTheWeek = async (\n  authorization: AuthObject\n): Promise<AchievementOfTheWeek> => {\n  const url = buildRequestUrl(\n    apiBaseUrl,\n    \"/API_GetAchievementOfTheWeek.php\",\n    authorization\n  );\n\n  const rawResponse = await call<GetAchievementOfTheWeekResponse>({ url });\n\n  return serializeProperties(rawResponse, {\n    shouldCastToNumbers: [\n      \"ID\",\n      \"Points\",\n      \"TrueRatio\",\n      \"TotalPlayers\",\n      \"RAPoints\",\n      \"RASoftcorePoints\",\n      \"UnlocksCount\",\n    ],\n    shouldMapToBooleans: [\"HardcoreMode\"],\n  });\n};\n", "import {\n  apiBaseUrl,\n  buildRequestUrl,\n  call,\n  serializeProperties,\n} from \"../utils/internal\";\nimport type { AuthObject } from \"../utils/public\";\nimport type { GetSetClaimsResponse, SetClaim } from \"./models\";\n\n/**\n * A call to this function returns information about all\n * (1000 max) active set claims.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @example\n * ```\n * const activeClaims = await getActiveClaims(authorization);\n * ```\n *\n * @returns An array containing metadata about all active claims.\n * ```\n * [\n *   {\n *     id: 7044,\n *     user: \"blendedsea\",\n *     gameId: 19212,\n *     gameTitle: \"SpongeBob SquarePants: Battle for Bikini Bottom\",\n *     gameIcon: \"/Images/059776.png\",\n *     consoleName: \"PlayStation 2\",\n *     consoleId: 22,\n *     claimType: 0,\n *     setType: 0,\n *     status: 0,\n *     extension: 0,\n *     special: 0,\n *     created: \"2022-10-04 00:25:06\",\n *     doneTime: \"2023-01-04 00:25:06\",\n *     updated: \"2022-10-04 00:25:06\",\n *     minutesLeft: 112523,\n *     userIsJrDev: false\n *   }\n * ]\n * ```\n */\nexport const getActiveClaims = async (\n  authorization: AuthObject\n): Promise<SetClaim[]> => {\n  const url = buildRequestUrl(\n    apiBaseUrl,\n    \"/API_GetActiveClaims.php\",\n    authorization\n  );\n\n  const rawResponse = await call<GetSetClaimsResponse>({ url });\n\n  return serializeProperties(rawResponse, {\n    shouldMapToBooleans: [\"UserIsJrDev\"],\n  });\n};\n", "import {\n  apiBaseUrl,\n  buildRequestUrl,\n  call,\n  serializeProperties,\n} from \"../utils/internal\";\nimport type { AuthObject } from \"../utils/public\";\nimport type { GetSetClaimsResponse, SetClaim } from \"./models\";\n\ntype ClaimKind = \"completed\" | \"dropped\" | \"expired\";\n\nexport const getClaims = async (\n  authorization: AuthObject,\n  payload: { claimKind: ClaimKind }\n): Promise<SetClaim[]> => {\n  const { claimKind } = payload;\n\n  const url = buildRequestUrl(apiBaseUrl, \"/API_GetClaims.php\", authorization, {\n    k: claimKindValueMap[claimKind],\n  });\n\n  const rawResponse = await call<GetSetClaimsResponse>({ url });\n\n  return serializeProperties(rawResponse, {\n    shouldMapToBooleans: [\"UserIsJrDev\"],\n  });\n};\n\nconst claimKindValueMap: Record<ClaimKind, `${number}`> = {\n  completed: \"1\",\n  dropped: \"2\",\n  expired: \"3\",\n};\n", "import {\n  apiBaseUrl,\n  buildRequestUrl,\n  call,\n  serializeProperties,\n} from \"../utils/internal\";\nimport type { AuthObject, AwardKind } from \"../utils/public\";\nimport type { GetRecentGameAwardsResponse, RecentGameAwards } from \"./models\";\n\n/**\n * A call to this function will retrieve all recently granted game\n * awards across the site's userbase.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @param payload.startDate The date to fetch awards from.\n *\n * @param payload.offset Optional. Defaults to 0.\n *\n * @param payload.count Optional. Defaults to 25.\n *\n * @param payload.desiredAwardKinds Optional. Defaults to all. Accepts \"beaten-softcore\", \"beaten-hardcore\", \"completed\", and/or \"mastered\".\n *\n * @example\n * ```\n * const recentGameAwards = await getRecentGameAwards(\n *   authorization,\n * );\n * ```\n *\n * @returns An object containing metadata about all recently granted game\n * awards across the site's userbase\n * ```\n * {\n *   count: 1,\n *   total: 1,\n *   results: [\n *     {\n *       user: \"renanbrj\",\n *       awardKind: \"mastered\",\n *       awardDate: \"2022-01-01T23:48:04+00:00\",\n *       gameId: 14_284,\n *       gameTitle: \"Batman Returns\",\n *       consoleId: 15,\n *       consoleName: \"Game Gear\",\n *     },\n *   ],\n * }\n * ```\n */\nexport const getRecentGameAwards = async (\n  authorization: AuthObject,\n  payload?: Partial<{\n    startDate: string;\n    offset: number;\n    count: number;\n    desiredAwardKinds: AwardKind[];\n  }>\n): Promise<RecentGameAwards> => {\n  const queryParams: Record<string, any> = {};\n  if (payload?.startDate) {\n    queryParams.d = payload.startDate;\n  }\n  if (payload?.offset) {\n    queryParams.o = payload.offset;\n  }\n  if (payload?.count) {\n    queryParams.c = payload.count;\n  }\n  if (payload?.desiredAwardKinds) {\n    queryParams.k = payload.desiredAwardKinds.join(\",\");\n  }\n\n  const url = buildRequestUrl(\n    apiBaseUrl,\n    \"/API_GetRecentGameAwards.php\",\n    authorization,\n    queryParams\n  );\n\n  const rawResponse = await call<GetRecentGameAwardsResponse>({ url });\n\n  return serializeProperties(rawResponse);\n};\n", "import { apiBaseUrl, buildRequestUrl, call } from \"../utils/internal\";\nimport type { AuthObject } from \"../utils/public\";\nimport type {\n  GetTopTenUsersResponse,\n  TopTenUsers,\n  TopTenUsersEntity,\n} from \"./models\";\n\n/**\n * A call to this function will retrieve the current top ten users\n * on the site.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @example\n * ```\n * const topTenUsers = await getTopTenUsers(authorization);\n * ```\n *\n * @returns An array containing the list of top ten users.\n * ```json\n * [\n *   { username: \"MockUser\", totalPoints: 350000, totalRatioPoints: 995000 },\n *   { username: \"MockUser2\", totalPoints: 345000, totalRatioPoints: 994000 },\n *   // ...\n * ]\n * ```\n */\nexport const getTopTenUsers = async (\n  authorization: AuthObject\n): Promise<TopTenUsers> => {\n  const url = buildRequestUrl(\n    apiBaseUrl,\n    \"/API_GetTopTenUsers.php\",\n    authorization\n  );\n\n  const rawTopTenUsers = await call<GetTopTenUsersResponse>({ url });\n\n  const sanitizedTopTenUsers: TopTenUsersEntity[] = [];\n  for (const rawUser of rawTopTenUsers) {\n    sanitizedTopTenUsers.push({\n      username: rawUser[\"1\"],\n      totalPoints: Number(rawUser[\"2\"]),\n      totalRatioPoints: Number(rawUser[\"3\"]),\n    });\n  }\n\n  return sanitizedTopTenUsers;\n};\n", "export enum ClaimSetType {\n  NewSet = 0,\n  Revision = 1,\n}\n", "export enum ClaimStatus {\n  Active = 0,\n  Complete = 1,\n  Dropped = 2,\n}\n", "export enum ClaimType {\n  Primary = 0,\n  Collaboration = 1,\n}\n", "import type { ID } from \"../utils/internal\";\nimport {\n  apiBaseUrl,\n  buildRequestUrl,\n  call,\n  serializeProperties,\n} from \"../utils/internal\";\nimport type { AuthObject } from \"../utils/public\";\nimport type { AchievementCount, GetAchievementCountResponse } from \"./models\";\n\n/**\n * A call to this function will retrieve the list of\n * achievement IDs for a game, targeted by game ID.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @param payload.gameId The unique game ID. If you are unsure, open the\n * game's page on the RetroAchievements.org website. For example, Dragster's\n * URL is https://retroachievements.org/game/14402. We can see from the\n * URL that the game ID is \"14402\".\n *\n * @example\n * ```\n * const achievementCount = await getAchievementCount(\n *   authorization,\n *   { gameId: 14402 }\n * );\n * ```\n *\n * @returns An object containing a gameId and a list of\n * achievementIds.\n * ```\n * { gameId: 14402, achievementIds: [1,2,3,4,5] }\n * ```\n */\nexport const getAchievementCount = async (\n  authorization: AuthObject,\n  payload: { gameId: ID }\n): Promise<AchievementCount> => {\n  const { gameId } = payload;\n\n  const url = buildRequestUrl(\n    apiBaseUrl,\n    \"/API_GetAchievementCount.php\",\n    authorization,\n    { i: gameId }\n  );\n\n  const rawResponse = await call<GetAchievementCountResponse>({ url });\n\n  return serializeProperties(rawResponse);\n};\n", "import type { ID } from \"../utils/internal\";\nimport { apiBaseUrl, buildRequestUrl, call } from \"../utils/internal\";\nimport type { AuthObject } from \"../utils/public\";\nimport type {\n  AchievementDistributionFlags,\n  GetAchievementDistributionResponse,\n} from \"./models\";\n\n/**\n * A call to this function will retrieve a dictionary\n * of the number of players who have earned a specific\n * number of achievements for a given game ID.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @param payload.gameId The unique game ID. If you are unsure, open the\n * game's page on the RetroAchievements.org website. For example, Dragster's\n * URL is https://retroachievements.org/game/14402. We can see from the\n * URL that the game ID is \"14402\".\n *\n * @param payload.flags Optional. By default, only official achievement\n * tallies are returned in the response. Import the `AchievementDistributionFlags`\n * enum for possible values. This lets you see the count of players who have\n * unlocked unofficial achievements.\n *\n * @param payload.hardcore Optional. By default, set to false, with both\n * softcore and hardcore tallies returned in the response. If this option\n * is set to true, only hardcore unlocks will be included in the totals.\n *\n * @example\n * ```\n * const achievementDistribution = await getAchievementDistribution(\n *   authorization,\n *   { gameId: 14402, hardcore: true }\n * );\n * ```\n *\n * @returns A dictionary where the keys represent the earned achievement\n * count and the values represent the number of players who have unlocked\n * that many achievements.\n * ```\n * {\n *   '1': 64,\n *   '2': 19,\n *   '3': 11,\n *   '4': 18,\n *   '5': 25,\n *   '6': 20,\n *   '7': 26,\n *   '8': 29,\n *   '9': 54,\n *   '10': 17,\n *   '11': 29,\n *   '12': 4\n * }\n * ```\n */\nexport const getAchievementDistribution = async (\n  authorization: AuthObject,\n  payload: {\n    gameId: ID;\n    flags?: AchievementDistributionFlags;\n    hardcore?: boolean;\n  }\n) => {\n  const { gameId, flags, hardcore } = payload;\n\n  const queryParams: Record<string, any> = { i: gameId };\n\n  if (flags !== undefined) {\n    queryParams[\"f\"] = flags;\n  }\n\n  if (hardcore !== undefined) {\n    queryParams[\"h\"] = hardcore === true ? 1 : 0;\n  }\n\n  const url = buildRequestUrl(\n    apiBaseUrl,\n    \"/API_GetAchievementDistribution.php\",\n    authorization,\n    queryParams\n  );\n\n  return await call<GetAchievementDistributionResponse>({\n    url,\n  });\n};\n", "import type { ID } from \"../utils/internal\";\nimport {\n  apiBaseUrl,\n  buildRequestUrl,\n  call,\n  serializeProperties,\n} from \"../utils/internal\";\nimport type { AuthObject } from \"../utils/public\";\nimport type { Game, GetGameResponse } from \"./models\";\n\n/**\n * A call to this function will retrieve basic metadata about\n * a game, targeted via its unique ID.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @param payload.gameId The unique game ID. If you are unsure, open the\n * game's page on the RetroAchievements.org website. For example, Dragster's\n * URL is https://retroachievements.org/game/14402. We can see from the\n * URL that the game ID is \"14402\".\n *\n * @example\n * ```\n * const game = await getGame(\n *   authorization,\n *   { gameId: 14402 }\n * );\n * ```\n *\n * @returns An object containing basic metadata about a target game.\n * ```json\n * {\n *   id: 14402,\n *   title: \"Dragster\",\n *   forumTopicId: 9145,\n *   consoleId: 25,\n *   consoleName: \"Atari 2600\",\n *   flags: 0,\n *   imageIcon: \"/Images/026368.png\",\n *   gameIcon: \"/Images/026368.png\",\n *   imageTitle: \"/Images/026366.png\",\n *   imageIngame: \"/Images/026367.png\",\n *   imageBoxArt: \"/Images/026365.png\",\n *   publisher: \"Activision\",\n *   developer: \"David Crane\",\n *   genre: \"Racing\",\n *   released: \"1980\",\n *   gameTitle: \"Dragster\",\n *   console: \"Atari 2600\"\n * }\n * ```\n */\nexport const getGame = async (\n  authorization: AuthObject,\n  payload: { gameId: ID }\n): Promise<Game> => {\n  const { gameId } = payload;\n\n  const url = buildRequestUrl(apiBaseUrl, \"/API_GetGame.php\", authorization, {\n    i: gameId,\n  });\n\n  const rawResponse = await call<GetGameResponse>({ url });\n\n  return serializeProperties(rawResponse, {\n    shouldCastToNumbers: [\"ID\", \"ForumTopicID\", \"ConsoleID\", \"Flags\"],\n  });\n};\n", "import type { ID } from \"../utils/internal\";\nimport {\n  apiBaseUrl,\n  buildRequestUrl,\n  call,\n  serializeProperties,\n} from \"../utils/internal\";\nimport type { AuthObject } from \"../utils/public\";\nimport type { GameExtended, GetGameExtendedResponse } from \"./models\";\n\n/**\n * A call to this function will retrieve extended metadata\n * about a game, targeted via its unique ID.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @param payload.gameId The unique game ID. If you are unsure, open the\n * game's page on the RetroAchievements.org website. For example, Dragster's\n * URL is https://retroachievements.org/game/14402. We can see from the\n * URL that the game ID is \"14402\".\n *\n * @example\n * ```\n * const gameExtended = await getGameExtended(\n *   authorization,\n *   { gameId: 14402 }\n * );\n * ```\n *\n * @returns An object containing extended metadata about a target game.\n * ```json\n * {\n *   id: 14402,\n *   title: \"Dragster\",\n *   consoleId: 25,\n *   forumTopicId: 9145,\n *   flags: 0,\n *   imageIcon: \"/Images/026368.png\",\n *   imageTitle: \"/Images/026366.png\",\n *   imageIngame: \"/Images/026367.png\",\n *   imageBoxArt: \"/Images/026365.png\",\n *   publisher: \"Activision\",\n *   developer: \"David Crane\",\n *   genre: \"Racing\",\n *   released: \"1980\",\n *   isFinal: false,\n *   consoleName: \"Atari 2600\",\n *   richPresencePatch: \"2b92fa1bf9635c303b3b7f8feea3ed3c\",\n *   numAchievements: 12,\n *   numDistinctPlayersCasual: 454,\n *   numDistinctPlayersHardcore: 323,\n *   claims: [],\n *   achievements: {\n *     '79434': {\n *       id: 79434,\n *       numAwarded: 338,\n *       numAwardedHardcore: 253,\n *       title: \"Novice Dragster Driver 1\",\n *       description: \"Complete your very first race in game 1.\",\n *       points: 1,\n *       trueRatio: 1,\n *       author: \"Boldewin\",\n *       dateModified: \"2019-08-01 19:03:46\",\n *       dateCreated: \"2019-07-31 18:49:57\",\n *       badgeName: \"85541\",\n *       displayOrder: 0,\n *       memAddr: \"f5c41fa0b5fa0d5fbb8a74c598f18582\"\n *     }\n *   }\n * }\n * ```\n */\nexport const getGameExtended = async (\n  authorization: AuthObject,\n  payload: { gameId: ID; isRequestingUnofficialAchievements?: boolean }\n): Promise<GameExtended> => {\n  const { gameId, isRequestingUnofficialAchievements } = payload;\n\n  const params: Record<string, string | number> = {\n    i: gameId,\n  };\n\n  if (isRequestingUnofficialAchievements) {\n    params[\"f\"] = 5;\n  }\n\n  const url = buildRequestUrl(\n    apiBaseUrl,\n    \"/API_GetGameExtended.php\",\n    authorization,\n    params\n  );\n\n  const rawResponse = await call<GetGameExtendedResponse>({ url });\n\n  return serializeProperties(rawResponse, {\n    shouldCastToNumbers: [\n      \"ID\",\n      \"NumAwarded\",\n      \"NumAwardedHardcore\",\n      \"Points\",\n      \"TrueRatio\",\n      \"DisplayOrder\",\n      \"NumDistinctPlayersCasual\",\n      \"NumDistinctPlayersHardcore\",\n    ],\n  });\n};\n", "import type { ID } from \"../utils/internal\";\nimport {\n  apiBaseUrl,\n  buildRequestUrl,\n  call,\n  serializeProperties,\n} from \"../utils/internal\";\nimport type { AuthObject } from \"../utils/public\";\nimport type {\n  GameRankAndScoreEntity,\n  GetGameRankAndScoreResponse,\n} from \"./models\";\n\n/**\n * A call to this function will retrieve metadata about\n * either the latest masters for a game, or the highest\n * points earners for a game. The game is targeted via\n * its unique ID.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @param payload.gameId The unique game ID. If you are unsure, open the\n * game's page on the RetroAchievements.org website. For example, Dragster's\n * URL is https://retroachievements.org/game/14402. We can see from the\n * URL that the game ID is \"14402\".\n *\n * @param payload.type Can either be \"latest-masters\" or \"high-scores\".\n *\n * @example\n * ```\n * const gameRankAndScore = await getGameRankAndScore(\n *   authorization,\n *   { gameId: 14402, type: \"latest-masters\" }\n * );\n * ```\n *\n * @returns An array containing a list of latest masters or\n * high score earners for a given game ID.\n * ```json\n * [\n *   {  user: 'Arekdias', totalScore: 189, lastAward: '2020-10-10 22:43:32' }\n * ]\n * ```\n */\nexport const getGameRankAndScore = async (\n  authorization: AuthObject,\n  payload: { gameId: ID; type: \"latest-masters\" | \"high-scores\" }\n): Promise<GameRankAndScoreEntity[]> => {\n  const { gameId, type } = payload;\n\n  const url = buildRequestUrl(\n    apiBaseUrl,\n    \"/API_GetGameRankAndScore.php\",\n    authorization,\n    {\n      g: gameId,\n      t: type === \"latest-masters\" ? 1 : 0,\n    }\n  );\n\n  const rawResponse = await call<GetGameRankAndScoreResponse>({ url });\n\n  return serializeProperties(rawResponse, {\n    shouldCastToNumbers: [\"TotalScore\"],\n  });\n};\n", "import type { ID } from \"../utils/internal\";\nimport {\n  apiBaseUrl,\n  buildRequestUrl,\n  call,\n  serializeProperties,\n} from \"../utils/internal\";\nimport type { AuthObject } from \"../utils/public\";\nimport type { GameRating, GetGameRatingResponse } from \"./models\";\n\n/**\n * A call to this function will retrieve metadata about\n * how users have rated the game and its set.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @param payload.gameId The unique game ID. If you are unsure, open the\n * game's page on the RetroAchievements.org website. For example, Dragster's\n * URL is https://retroachievements.org/game/14402. We can see from the\n * URL that the game ID is \"14402\".\n *\n * @example\n * ```\n * const gameRating = await getGameRating(\n *   authorization,\n *   { gameId: 14402 }\n * );\n * ```\n *\n * @returns An object with game rating metadata.\n * ```json\n * {\n *   gameId: 14402,\n *   ratings: {\n *     game: 3.1875,\n *     achievements: 0,\n *     gameNumVotes: 16,\n *     achievementsNumVotes: 0\n *   }\n * }\n * ```\n */\nexport const getGameRating = async (\n  authorization: AuthObject,\n  payload: { gameId: ID }\n): Promise<GameRating> => {\n  const { gameId } = payload;\n\n  const url = buildRequestUrl(\n    apiBaseUrl,\n    \"/API_GetGameRating.php\",\n    authorization,\n    { i: gameId }\n  );\n\n  const rawResponse = await call<GetGameRatingResponse>({ url });\n\n  return serializeProperties(rawResponse);\n};\n", "export enum AchievementDistributionFlags {\n  CoreAchievements = 3,\n  UnofficialAchievements = 5,\n}\n", "// NOTE: This cannot be a true extension of the `GetGameResponse`\n// interface because the return types for many of these fields\n// are different from the actual RA API.\n\nenum GameExtendedClaimType {\n  Primary = \"0\",\n  Collaboration = \"1\",\n}\n\nexport interface GameExtendedRawAchievementEntity {\n  ID: string;\n  NumAwarded: string;\n  NumAwardedHardcore: string;\n  Title: string;\n  Description: string;\n  Points: string;\n  TrueRatio: string;\n  Author: string;\n  DateModified: string;\n  DateCreated: string;\n  BadgeName: string;\n  DisplayOrder: string;\n  MemAddr: string;\n}\n\ninterface GameExtendedRawClaimEntity {\n  User: string;\n  SetType: string;\n  ClaimType: GameExtendedClaimType;\n  Created: string;\n  Expiration: string;\n}\n\nexport interface GetGameExtendedResponse {\n  ID: number;\n  Title: string;\n  ConsoleID: number;\n  ForumTopicID: number;\n  Flags: number;\n  ImageIcon: string;\n  ImageTitle: string;\n  ImageIngame: string;\n  ImageBoxArt: string;\n  Publisher: string;\n  Developer: string;\n  Genre: string;\n  Released: string;\n  IsFinal: boolean;\n  ConsoleName: string;\n  RichPresencePatch: string;\n  NumAchievements: number;\n  NumDistinctPlayersCasual: string;\n  NumDistinctPlayersHardcore: string;\n  Claims: GameExtendedRawClaimEntity[];\n  Achievements: Record<number, GameExtendedRawAchievementEntity> | [];\n}\n", "import type { ID } from \"../utils/internal\";\nimport {\n  apiBaseUrl,\n  buildRequestUrl,\n  call,\n  serializeProperties,\n} from \"../utils/internal\";\nimport type { AuthObject } from \"../utils/public\";\nimport type {\n  AchievementTicketStats,\n  GameTicketStats,\n  MostTicketedGames,\n  RecentTickets,\n  TicketEntity,\n  UserTicketStats,\n} from \"./models\";\n\ninterface GetTicketDataAllPayloadValues {\n  ticketId?: string | number;\n  offset?: number;\n  count?: number;\n  isGettingMostTicketedGames?: true;\n  username?: string;\n  gameId?: string | number;\n  isGettingTicketsForUnofficialAchievements?: true;\n  shouldReturnTicketsList?: true;\n  achievementId?: string | number;\n}\n\n/**\n * BEGIN: Function overload definitions\n */\n\n/**\n * A call to this function will retrieve ticket metadata information\n * about a single achievement ticket, targeted by its ticket ID.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @param payload.ticketId The ID of the ticket to get information about.\n *\n * @example\n * ```\n * const ticketData = await getTicketData(\n *   authorization,\n *   { ticketId: 12345 }\n * );\n * ```\n *\n * @returns An object containing metadata about a target ticket.\n */\nexport function getTicketData(\n  authorization: AuthObject,\n  payload: { ticketId: ID }\n): Promise<TicketEntity>;\n\n/**\n * A call to this function will retrieve ticket metadata information\n * about the latest opened achievement tickets on RetroAchievements.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @param payload.count Optional. Defaults to 10. Max is 100.\n * How many tickets to retrieve.\n *\n * @param payload.offset Optional. Defaults to 0.\n * Number of tickets to skip. This can be used for pagination.\n *\n * @example\n * ```\n * const ticketData = await getTicketData(authorization);\n * ```\n *\n * @returns A list of the most recently opened tickets on the site.\n */\nexport function getTicketData(\n  authorization: AuthObject,\n  payload?: Partial<{ offset: number; count: number }>\n): Promise<RecentTickets>;\n\n/**\n * A call to this function will retrieve the games on the site with\n * the highest count of opened achievement tickets.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @param payload.count Optional. Defaults to 10. Max is 100.\n * How many ticketed games to retrieve.\n *\n * @param payload.offset Optional. Defaults to 0.\n * Number of games to skip. This can be used for pagination.\n *\n * @example\n * ```\n * const ticketData = await getTicketData(\n *   authorization,\n *   { isGettingMostTicketedGames: true }\n * );\n * ```\n *\n * @returns A list of the most recently opened tickets on the site.\n */\nexport function getTicketData(\n  authorization: AuthObject,\n  payload: { isGettingMostTicketedGames: true; offset?: number; count?: number }\n): Promise<MostTicketedGames>;\n\n/**\n * A call to this function will retrieve an achievement developer's\n * ticket stats, targeted by that developer's username.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @param payload.username The developer's account username to retrieve\n * ticket stats for.\n *\n * @example\n * ```\n * const ticketData = await getTicketData(\n *   authorization,\n *   { username: \"xelnia\" }\n * );\n * ```\n *\n * @returns An achievement developer's ticket stats.\n */\nexport function getTicketData(\n  authorization: AuthObject,\n  payload: { username: string }\n): Promise<UserTicketStats>;\n\n/**\n * A call to this function will retrieve a game's ticket stats, targeted\n * by the game's ID. If you are unsure of a game's ID, visit its page\n * on the RetroAchievements website and copy the number at the end of the URL.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @param payload.gameId The game ID to fetch ticket stats for.\n *\n * @param payload.isGettingTicketsForUnofficialAchievements Optional. Fetch stats\n * for unofficial/non-core achievements that have tickets.\n *\n * @param payload.shouldReturnTicketsList Optional. If true, not only fetches a\n * game's ticket stats, but also returns a list of tickets for the game.\n *\n * @example\n * ```\n * const ticketData = await getTicketData(\n *   authorization,\n *   { gameId: 14_402 }\n * );\n * ```\n *\n * @returns A game's ticket stats, potentially also including the ticket list.\n */\nexport function getTicketData(\n  authorization: AuthObject,\n  payload: {\n    gameId: ID;\n    isGettingTicketsForUnofficialAchievements?: true;\n    shouldReturnTicketsList?: true;\n  }\n): Promise<GameTicketStats>;\n\n/**\n * A call to this function will retrieve the an achievement's\n * ticket stats, targeted by the achievement's ID. If you are unsure\n * of an achievement's ID, open its page on the RetroAchievements\n * website and copy the number at the end of the URL.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @param payload.achievementId The ID of the achievement to fetch ticket\n * stats for.\n *\n * @example\n * ```\n * const ticketData = await getTicketData(\n *   authorization,\n *   { achievementId: 12345 }\n * );\n * ```\n *\n * @returns An achievement developer's ticket stats.\n */\nexport function getTicketData(\n  authorization: AuthObject,\n  payload: { achievementId: ID }\n): Promise<AchievementTicketStats>;\n\n/**\n * END: Function overload definitions\n */\n\nexport async function getTicketData(\n  authorization: AuthObject,\n  payload: GetTicketDataAllPayloadValues = {}\n) {\n  const queryParams = buildGetTicketDataQueryParams(payload);\n\n  const url = buildRequestUrl(\n    apiBaseUrl,\n    \"/API_GetTicketData.php\",\n    authorization,\n    queryParams\n  );\n\n  const rawResponse = await call({ url });\n\n  return serializeProperties(rawResponse, {\n    shouldCastToNumbers: [\n      \"ID\",\n      \"AchievementID\",\n      \"Points\",\n      \"GameID\",\n      \"ReportType\",\n      \"ReportState\",\n      \"OpenTickets\",\n    ],\n    shouldMapToBooleans: [\"Hardcore\"],\n  });\n}\n\nconst buildGetTicketDataQueryParams = (\n  payload: GetTicketDataAllPayloadValues\n) => {\n  const {\n    ticketId,\n    isGettingMostTicketedGames,\n    username,\n    gameId,\n    isGettingTicketsForUnofficialAchievements,\n    shouldReturnTicketsList,\n    achievementId,\n  } = payload;\n\n  let queryParams: Record<string, string | number> = {};\n\n  if (ticketId !== undefined) {\n    queryParams[\"i\"] = ticketId;\n  } else if (isGettingMostTicketedGames) {\n    queryParams[\"f\"] = \"1\";\n    queryParams = applyPaginationQueryParams(queryParams, payload);\n  } else if (username) {\n    queryParams[\"u\"] = username;\n  } else if (gameId) {\n    queryParams[\"g\"] = gameId;\n\n    if (isGettingTicketsForUnofficialAchievements) {\n      queryParams[\"f\"] = \"5\";\n    }\n\n    if (shouldReturnTicketsList) {\n      queryParams[\"d\"] = \"1\";\n    }\n  } else if (achievementId) {\n    queryParams[\"a\"] = achievementId;\n  } else {\n    queryParams = applyPaginationQueryParams(queryParams, payload);\n  }\n\n  return queryParams;\n};\n\nconst applyPaginationQueryParams = (\n  currentParams: Record<string, string | number>,\n  payload: Partial<{ count: number; offset: number }>\n) => {\n  const modifiedParams = { ...currentParams };\n\n  if (payload.count !== undefined) {\n    modifiedParams[\"c\"] = payload.count;\n  }\n\n  if (payload.offset !== undefined) {\n    modifiedParams[\"o\"] = payload.offset;\n  }\n\n  return modifiedParams;\n};\n", "import {\n  apiBaseUrl,\n  buildRequestUrl,\n  call,\n  serializeProperties,\n} from \"../utils/internal\";\nimport type { AuthObject } from \"../utils/public\";\nimport type {\n  DatedUserAchievement,\n  DatedUserAchievementsResponse,\n} from \"./models\";\n\n/**\n * A call to this function will retrieve a list of achievements\n * earned by a given user between two provided dates.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @param payload.username The user for which to retrieve the\n * list of achievements for.\n *\n * @param payload.fromDate A Date object specifying when\n * the list itself should begin.\n *\n * @param payload.toDate A Date object specifying when\n * the list itself should end.\n *\n * @example\n * ```\n * const achievementsEarnedBetween = await getAchievementsEarnedBetween(\n *   authorization,\n *   {\n *     username: \"xelnia\",\n *     fromDate: new Date(\"2022-10-12\"),\n *     toDate: new Date(\"2022-10-13\")\n *   }\n * );\n * ```\n *\n * @returns An array containing metadata about the user\n * achievements earned during the specified date range.\n * ```\n * [\n *   {\n *     date: '2022-10-12 07:58:05',\n *     hardcoreMode: true,\n *     achievementId: 173315,\n *     title: 'Your Puny Human Weapons',\n *     description: 'Collect all objects in the Weapons Category.',\n *     badgeName: '193756',\n *     points: 10,\n *     author: 'blendedsea',\n *     gameTitle: 'Me & My Katamari',\n *     gameIcon: '/Images/047357.png',\n *     gameId: 3571,\n *     consoleName: 'PlayStation Portable',\n *     cumulScore: 120,\n *     badgeUrl: '/Badge/193756.png',\n *     gameUrl: '/game/3571',\n *     type: 'progression'\n *   }\n * ]\n * ```\n */\nexport const getAchievementsEarnedBetween = async (\n  authorization: AuthObject,\n  payload: { username: string; fromDate: Date; toDate: Date }\n): Promise<DatedUserAchievement[]> => {\n  const { username, fromDate, toDate } = payload;\n\n  const url = buildRequestUrl(\n    apiBaseUrl,\n    \"/API_GetAchievementsEarnedBetween.php\",\n    authorization,\n    {\n      u: username,\n      f: (fromDate.getTime() / 1000).toFixed(0),\n      t: (toDate.getTime() / 1000).toFixed(0),\n    }\n  );\n\n  const rawResponse = await call<DatedUserAchievementsResponse>({ url });\n\n  return serializeProperties(rawResponse, {\n    shouldCastToNumbers: [\"AchievementID\", \"Points\", \"GameID\"],\n    shouldMapToBooleans: [\"HardcoreMode\"],\n  });\n};\n", "import {\n  apiBaseUrl,\n  buildRequestUrl,\n  call,\n  serializeProperties,\n} from \"../utils/internal\";\nimport type { AuthObject } from \"../utils/public\";\nimport type {\n  DatedUserAchievement,\n  DatedUserAchievementsResponse,\n} from \"./models\";\n\n/**\n * A call to this function will retrieve a list of achievements\n * earned by a given user on a specified date.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @param payload.username The user for which to retrieve the\n * list of achievements for.\n *\n * @param payload.fromDate A Date object specifying when\n * the list itself should begin.\n *\n * @param payload.onDate A Date object specifying the day\n * to query for a user's earned achievements.\n *\n * @example\n * ```\n * const achievementsEarnedOnDay = await getAchievementsEarnedOnDay(\n *   authorization,\n *   {\n *     username: \"xelnia\",\n *     onDate: new Date(\"2022-10-13\")\n *   }\n * );\n * ```\n *\n * @returns An array containing metadata about the user\n * achievements earned on the specified day.\n * ```\n *  [\n *    {\n *      date: '2022-10-12 07:58:05',\n *      hardcoreMode: true,\n *      achievementId: 173315,\n *      title: 'Your Puny Human Weapons',\n *      description: 'Collect all objects in the Weapons Category.',\n *      badgeName: '193756',\n *      points: 10,\n *      author: 'blendedsea',\n *      gameTitle: 'Me & My Katamari',\n *      gameIcon: '/Images/047357.png',\n *      gameId: 3571,\n *      consoleName: 'PlayStation Portable',\n *      cumulScore: 120,\n *      badgeUrl: '/Badge/193756.png',\n *      gameUrl: '/game/3571',\n *      type: 'progression'\n *    }\n *  ]\n * ```\n */\nexport const getAchievementsEarnedOnDay = async (\n  authorization: AuthObject,\n  payload: { username: string; onDate: Date }\n): Promise<DatedUserAchievement[]> => {\n  const { username, onDate } = payload;\n\n  const url = buildRequestUrl(\n    apiBaseUrl,\n    \"/API_GetAchievementsEarnedOnDay.php\",\n    authorization,\n    {\n      u: username,\n      // YYYY-MM-DD\n      d: `${onDate.getFullYear()}-${onDate.getMonth() + 1}-${onDate.getDate()}`,\n    }\n  );\n\n  const rawResponse = await call<DatedUserAchievementsResponse>({ url });\n\n  return serializeProperties(rawResponse, {\n    shouldCastToNumbers: [\"AchievementID\", \"Points\", \"GameID\"],\n    shouldMapToBooleans: [\"HardcoreMode\"],\n  });\n};\n", "import type { ID } from \"../utils/internal\";\nimport {\n  apiBaseUrl,\n  buildRequestUrl,\n  call,\n  serializeProperties,\n} from \"../utils/internal\";\nimport type { AuthObject } from \"../utils/public\";\nimport type {\n  GameInfoAndUserProgress,\n  GetGameInfoAndUserProgressResponse,\n} from \"./models\";\n\n/**\n * A call to this function will retrieve extended metadata\n * about a game, in addition to a user's progress about a game.\n * This is targeted via a game's unique ID and a given username.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @param payload.gameId The unique game ID. If you are unsure, open the\n * game's page on the RetroAchievements.org website. For example, Dragster's\n * URL is https://retroachievements.org/game/14402. We can see from the\n * URL that the game ID is \"14402\".\n *\n * @param payload.username The user for which to retrieve the\n * game progress for.\n *\n * @param payload.shouldIncludeHighestAwardMetadata Include a \"HighestAwardKind\"\n * and a \"HighestAwardDate\" for the given user and game ID.\n *\n * @example\n * ```\n * const gameInfoAndUserProgress = await getGameInfoAndUserProgress(\n *   authorization,\n *   { gameId: 14402, username: \"wv_pinball\" }\n * );\n * ```\n *\n * @returns An object containing extended metadata about a target game,\n * with attached progress for a target username.\n * ```json\n * {\n *   id: 14402,\n *   title: \"Dragster\",\n *   consoleId: 25,\n *   forumTopicId: 9145,\n *   flags: 0,\n *   imageIcon: \"/Images/026368.png\",\n *   imageTitle: \"/Images/026366.png\",\n *   imageIngame: \"/Images/026367.png\",\n *   imageBoxArt: \"/Images/026365.png\",\n *   publisher: \"Activision\",\n *   developer: \"David Crane\",\n *   genre: \"Racing\",\n *   released: \"1980\",\n *   isFinal: false,\n *   consoleName: \"Atari 2600\",\n *   richPresencePatch: \"2b92fa1bf9635c303b3b7f8feea3ed3c\",\n *   numAchievements: 12,\n *   numDistinctPlayersCasual: 454,\n *   numDistinctPlayersHardcore, 323\n *   claims: [],\n *   achievements: {\n *     '79434': {\n *       id: 79434,\n *       numAwarded: 338,\n *       numAwardedHardcore: 253,\n *       title: \"Novice Dragster Driver 1\",\n *       description: \"Complete your very first race in game 1.\",\n *       points: 1,\n *       trueRatio: 1,\n *       author: \"Boldewin\",\n *       dateModified: \"2019-08-01 19:03:46\",\n *       dateCreated: \"2019-07-31 18:49:57\",\n *       badgeName: \"85541\",\n *       displayOrder: 0,\n *       memAddr: \"f5c41fa0b5fa0d5fbb8a74c598f18582\",\n *       dateEarned: '2022-08-23 22:56:38',\n *       dateEarnedHardcore: '2022-08-23 22:56:38'\n *     }\n *   },\n *   numAwardedToUser: 12,\n *   numAwardedToUserHardcore: 12,\n *   userCompletion: \"100.00%\",\n *   userCompletionHardcore: \"100.00%\"\n * }\n * ```\n */\nexport const getGameInfoAndUserProgress = async (\n  authorization: AuthObject,\n  payload: {\n    gameId: ID;\n    username: string;\n    shouldIncludeHighestAwardMetadata?: boolean;\n  }\n): Promise<GameInfoAndUserProgress> => {\n  const { gameId, username, shouldIncludeHighestAwardMetadata } = payload;\n\n  const params: Record<string, any> = {\n    g: gameId,\n    u: username,\n  };\n  if (shouldIncludeHighestAwardMetadata) {\n    params.a = 1;\n  }\n\n  const url = buildRequestUrl(\n    apiBaseUrl,\n    \"/API_GetGameInfoAndUserProgress.php\",\n    authorization,\n    params\n  );\n\n  const rawResponse = await call<GetGameInfoAndUserProgressResponse>({ url });\n\n  return serializeProperties(rawResponse, {\n    shouldCastToNumbers: [\n      \"ID\",\n      \"NumAwarded\",\n      \"NumAwardedHardcore\",\n      \"Points\",\n      \"TrueRatio\",\n      \"DisplayOrder\",\n      \"NumDistinctPlayersCasual\",\n      \"NumDistinctPlayersHardcore\",\n    ],\n  });\n};\n", "import {\n  apiBaseUrl,\n  buildRequestUrl,\n  call,\n  serializeProperties,\n} from \"../utils/internal\";\nimport type { AuthObject } from \"../utils/public\";\nimport type { GetUserAwardsResponse, UserAwards } from \"./models\";\n\n/**\n * A call to this function will retrieve metadata about the target user's\n * site awards, via their username.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @param payload.username The user for which to retrieve the site awards for.\n *\n * @example\n * ```\n * const userAwards = await getUserAwards(\n *   authorization,\n *   { username: \"xelnia\" }\n * )\n * ```\n *\n * @returns\n * ```json\n * {\n *   totalAwardsCount: 10,\n *   hiddenAwardsCount: 2,\n *   masteryAwardsCount: 6,\n *   completionAwardsCount: 0,\n *   beatenHardcoreAwardsCount: 24,\n *   beatenSoftcoreAwardsCount: 7,\n *   eventAwardsCount: 0,\n *   siteAwardsCount: 2,\n *   visibleUserAwards: [\n *     {\n *       awardedAt: \"2022-08-26T19:34:43+00:00\",\n *       awardType: \"Mastery/Completion\",\n *       awardData: 802,\n *       awardDataExtra: 1,\n *       displayOrder: 114,\n *       title: \"WarioWare, Inc.: Mega Microgames!\",\n *       consoleName: \"Game Boy Advance\",\n *       flags: null,\n *       imageIcon: \"/Images/034678.png\"\n *     }\n *   ]\n * }\n * ```\n */\nexport const getUserAwards = async (\n  authorization: AuthObject,\n  payload: { username: string }\n): Promise<UserAwards> => {\n  const { username } = payload;\n\n  const queryParams: Record<string, string> = { u: username };\n\n  const url = buildRequestUrl(\n    apiBaseUrl,\n    \"/API_GetUserAwards.php\",\n    authorization,\n    queryParams\n  );\n\n  const rawResponse = await call<GetUserAwardsResponse>({ url });\n\n  return serializeProperties(rawResponse);\n};\n", "import {\n  apiBaseUrl,\n  buildRequestUrl,\n  call,\n  serializeProperties,\n} from \"../utils/internal\";\nimport type { AuthObject } from \"../utils/public\";\nimport type { GetUserClaimsResponse, UserClaims } from \"./models\";\n\n/**\n * A call to this function will retrieve a list of\n * achievement set claims made over the lifetime of a given\n * user, targeted by their username.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @param payload.username The user for which to retrieve the historical\n * achievement set claims list for.\n *\n * @example\n * ```\n * const userClaims = await getUserClaims(\n *   authorization,\n *   { username: \"Jamiras\" }\n * );\n * ```\n *\n * @returns An array containing all the achievement set claims\n * made over the lifetime of the given user.\n */\nexport const getUserClaims = async (\n  authorization: AuthObject,\n  payload: { username: string }\n): Promise<UserClaims> => {\n  const { username } = payload;\n\n  const url = buildRequestUrl(\n    apiBaseUrl,\n    \"/API_GetUserClaims.php\",\n    authorization,\n    { u: username }\n  );\n\n  const rawResponse = await call<GetUserClaimsResponse>({ url });\n\n  return serializeProperties(rawResponse, {\n    shouldCastToNumbers: [\n      \"ID\",\n      \"GameID\",\n      \"ClaimType\",\n      \"SetType\",\n      \"Status\",\n      \"Extension\",\n      \"Special\",\n      \"MinutesLeft\",\n    ],\n  });\n};\n", "import {\n  apiBaseUrl,\n  buildRequestUrl,\n  call,\n  serializeProperties,\n} from \"../utils/internal\";\nimport type { AuthObject } from \"../utils/public\";\nimport type {\n  GetUserCompletedGamesResponse,\n  UserCompletedGames,\n} from \"./models\";\n\n/**\n * A call to this function will retrieve completion metadata\n * about the games a given user has played. It returns two\n * entries per each game: one for the softcore completion and\n * one for the hardcore completion. These are designated by\n * the `hardcoreMode` property on each completion object.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @param payload.username The user for which to retrieve the\n * completion metadata for.\n *\n * @example\n * ```\n * const userCompletedGames = await getUserCompletedGames(\n *   authorization,\n *   { username: \"xelnia\" }\n * );\n * ```\n *\n * @returns An array containing completion metadata objects\n * for a given user. Each game contains two completion records,\n * one for softcore and another for hardcore.\n * ```json\n * [\n *   {\n *     gameId: 14976,\n *     title: 'Mortal Kombat',\n *     imageIcon: '/Images/036812.png',\n *     consoleId: 27,\n *     consoleName: 'Arcade',\n *     maxPossible: 35,\n *     numAwarded: 13,\n *     pctWon: 0.3714,\n *     hardcoreMode: false\n *   },\n *   {\n *     gameId: 14976,\n *     title: 'Mortal Kombat',\n *     imageIcon: '/Images/036812.png',\n *     consoleId: 27,\n *     consoleName: 'Arcade',\n *     maxPossible: 35,\n *     numAwarded: 13,\n *     pctWon: 0.3714,\n *     hardcoreMode: true\n *   },\n * ]\n * ```\n */\nexport const getUserCompletedGames = async (\n  authorization: AuthObject,\n  payload: { username: string }\n): Promise<UserCompletedGames> => {\n  const { username } = payload;\n\n  const url = buildRequestUrl(\n    apiBaseUrl,\n    \"/API_GetUserCompletedGames.php\",\n    authorization,\n    { u: username }\n  );\n\n  const rawResponse = await call<GetUserCompletedGamesResponse>({ url });\n\n  return serializeProperties(rawResponse, {\n    shouldCastToNumbers: [\n      \"GameID\",\n      \"ConsoleID\",\n      \"MaxPossible\",\n      \"NumAwarded\",\n      \"PctWon\",\n    ],\n    shouldMapToBooleans: [\"HardcoreMode\"],\n  });\n};\n", "import {\n  apiBaseUrl,\n  buildRequestUrl,\n  call,\n  serializeProperties,\n} from \"../utils/internal\";\nimport type { AuthObject } from \"../utils/public\";\nimport type {\n  GetUserCompletionProgressResponse,\n  UserCompletionProgress,\n} from \"./models\";\n\n/**\n * A call to this function will retrieve a given user's completion\n * progress, targeted by their username.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @param payload.username The user for which to retrieve the progress for.\n *\n * @param payload.offset Defaults to 0. The number of entries to skip.\n *\n * @param payload.count Defaults to 100, has a max of 500.\n *\n * @example\n * ```\n * const userCompletionProgress = await getUserCompletionProgress(\n *   authorization,\n *   { username: \"xelnia\" }\n * );\n * ```\n *\n * @returns\n * ```\n * {\n *   \"count\": 100,\n *   \"total\": 752,\n *   \"results\": [\n *     {\n         gameId: 11406,\n         title: 'Mortal Kombat 4',\n         imageIcon: '/Images/042133.png',\n         consoleId: 12,\n         consoleName: 'PlayStation',\n         maxPossible: 131,\n         numAwarded: 131,\n         numAwardedHardcore: 131,\n         mostRecentAwardedDate: '2022-08-07T18:24:44+00:00',\n         highestAwardKind: 'mastered',\n         highestAwardDate: '2022-08-07T18:24:44+00:00'\n *     }\n *   ]\n * }\n * ```\n */\nexport const getUserCompletionProgress = async (\n  authorization: AuthObject,\n  payload: { username: string; offset?: number; count?: number }\n): Promise<UserCompletionProgress> => {\n  const { username, offset, count } = payload;\n\n  const params: Record<string, string | number> = {\n    u: username,\n  };\n  if (offset) {\n    params[\"o\"] = offset;\n  }\n  if (count) {\n    params[\"c\"] = count;\n  }\n\n  const url = buildRequestUrl(\n    apiBaseUrl,\n    \"/API_GetUserCompletionProgress.php\",\n    authorization,\n    params\n  );\n\n  const rawResponse = await call<GetUserCompletionProgressResponse>({ url });\n\n  return serializeProperties(rawResponse);\n};\n", "import type { ID } from \"../utils/internal\";\nimport {\n  apiBaseUrl,\n  buildRequestUrl,\n  call,\n  serializeProperties,\n} from \"../utils/internal\";\nimport type { AuthObject } from \"../utils/public\";\nimport type {\n  GetUserGameRankAndScoreResponse,\n  UserGameRankAndScore,\n} from \"./models\";\n\n/**\n * A call to this function will retrieve metadata about\n * how a particular user has performed/ranked on a particular\n * game, targeted by game ID.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @param payload.gameId The unique game ID. If you are unsure, open the\n * game's page on the RetroAchievements.org website. For example, Dragster's\n * URL is https://retroachievements.org/game/14402. We can see from the\n * URL that the game ID is \"14402\".\n *\n * @param payload.username The user for which to retrieve the\n * game ranking metadata for.\n *\n * @example\n * ```\n * const userGameRankAndScore = await getUserGameRankAndScore(\n *   authorization,\n *   { gameId: 14402, username: \"xelnia\" }\n * );\n * ```\n *\n * @returns An array containing metadata about the user's\n * rank and score for the target game ID. If metadata\n * cannot be found, the array is empty.\n * ```json\n * [\n *   {\n *     user: \"xelnia\",\n *     totalScore: 378,\n *     lastAward: \"2022-09-01 21:51:23\",\n *     userRank: 3\n *   }\n * ]\n * ```\n */\nexport const getUserGameRankAndScore = async (\n  authorization: AuthObject,\n  payload: { gameId: ID; username: string }\n): Promise<UserGameRankAndScore> => {\n  const { gameId, username } = payload;\n\n  const url = buildRequestUrl(\n    apiBaseUrl,\n    \"/API_GetUserGameRankAndScore.php\",\n    authorization,\n    { g: gameId, u: username }\n  );\n\n  const rawResponse = await call<GetUserGameRankAndScoreResponse>({ url });\n\n  return serializeProperties(rawResponse, {\n    shouldCastToNumbers: [\"TotalScore\", \"UserRank\"],\n  });\n};\n", "import {\n  apiBaseUrl,\n  buildRequestUrl,\n  call,\n  serializeProperties,\n} from \"../utils/internal\";\nimport type { AuthObject } from \"../utils/public\";\nimport type { GetUserPointsResponse, UserPoints } from \"./models\";\n\n/**\n * A call to this function will retrieve a given user's hardcore\n * and softcore points.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @param payload.username The user for which to retrieve the point totals for.\n *\n * @example\n * ```\n * const userPoints = await getUserPoints(\n *   authorization,\n *   { username: \"xelnia\" }\n * );\n * ```\n *\n * @returns An object containing metadata about a target user's points.\n * ```json\n * {\n *   points: 7640,\n *   softcorePoints: 25\n * }\n * ```\n */\nexport const getUserPoints = async (\n  authorization: AuthObject,\n  payload: { username: string }\n): Promise<UserPoints> => {\n  const { username } = payload;\n\n  const url = buildRequestUrl(\n    apiBaseUrl,\n    \"/API_GetUserPoints.php\",\n    authorization,\n    { u: username }\n  );\n\n  const rawResponse = await call<GetUserPointsResponse>({ url });\n\n  return serializeProperties(rawResponse);\n};\n", "import {\n  apiBaseUrl,\n  buildRequestUrl,\n  call,\n  serializeProperties,\n} from \"../utils/internal\";\nimport type { AuthObject } from \"../utils/public\";\nimport type { GetUserProfileResponse, UserProfile } from \"./models\";\n\n/**\n * A call to this function will retrieve summary information about\n * a given user, targeted by username.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @param payload.username The user for which to retrieve the summary for.\n *\n * @example\n * ```\n * const userSummary = await getUserProfile(\n *   authorization,\n *   { username: \"xelnia\" }\n * );\n * ```\n *\n * @returns An object containing profile summary metadata about a target user.\n */\nexport const getUserProfile = async (\n  authorization: AuthObject,\n  payload: {\n    username: string;\n  }\n): Promise<UserProfile> => {\n  const { username } = payload;\n\n  const url = buildRequestUrl(\n    apiBaseUrl,\n    \"/API_GetUserProfile.php\",\n    authorization,\n    { u: username }\n  );\n\n  const rawResponse = await call<GetUserProfileResponse>({ url });\n\n  return serializeProperties(rawResponse, {\n    shouldCastToNumbers: [\n      \"TotalPoints\",\n      \"TotalSoftcorePoints\",\n      \"TotalTruePoints\",\n      \"Permissions\",\n    ],\n    shouldMapToBooleans: [\"Untracked\", \"UserWallActive\"],\n  });\n};\n", "import type { ID } from \"../utils/internal\";\nimport {\n  apiBaseUrl,\n  buildRequestUrl,\n  call,\n  serializeProperties,\n} from \"../utils/internal\";\nimport type { AuthObject } from \"../utils/public\";\nimport type { GetUserProgressResponse, UserProgress } from \"./models\";\n\n/**\n * A call to this function will retrieve a given user's\n * progress on a given list of games, targeted by game ID.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @param payload.username The user for which to retrieve the progress for.\n *\n * @param payload.gameIds An array of RetroAchievements game IDs. If you aren't\n * sure of the game ID, visit the game's page on the website and copy the number\n * at the end of the URL.\n *\n * @example\n * ```\n * const userProgress = await getUserProgress(\n *   authorization,\n *   { username: \"xelnia\", gameIds: [1, 14402] }\n * );\n * ```\n *\n * @returns An object which is a map of summarized progress for games.\n * ```json\n * {\n *   \"1\": {\n *     numPossibleAchievements: 24,\n *     possibleScore: 255,\n *     numAchieved: 0,\n *     scoreAchieved: 0,\n *     numAchievedHardcore: 0,\n *     scoreAchievedHardcore: 0\n *   },\n *   \"14402\": {\n *     numPossibleAchievements: 24,\n *     possibleScore: 255,\n *     numAchieved: 0,\n *     scoreAchieved: 0,\n *     numAchievedHardcore: 0,\n *     scoreAchievedHardcore: 0\n *   }\n * }\n * ```\n */\nexport const getUserProgress = async (\n  authorization: AuthObject,\n  payload: { username: string; gameIds: ID[] }\n): Promise<UserProgress> => {\n  const { username, gameIds } = payload;\n\n  const url = buildRequestUrl(\n    apiBaseUrl,\n    \"/API_GetUserProgress.php\",\n    authorization,\n    { u: username, i: gameIds.join(\",\") }\n  );\n\n  const rawResponse = await call<GetUserProgressResponse>({ url });\n\n  return serializeProperties(rawResponse, {\n    shouldCastToNumbers: [\n      \"NumPossibleAchievements\",\n      \"PossibleScore\",\n      \"NumAchieved\",\n      \"ScoreAchieved\",\n      \"NumAchievedHardcore\",\n      \"ScoreAchievedHardcore\",\n    ],\n  });\n};\n", "import {\n  apiBaseUrl,\n  buildRequestUrl,\n  call,\n  serializeProperties,\n} from \"../utils/internal\";\nimport type { AuthObject } from \"../utils/public\";\nimport type {\n  GetUserRecentAchievementsResponse,\n  UserRecentAchievement,\n} from \"./models\";\n\n/**\n * A call to this function will retrieve a list of a target user's\n * recently earned achievements, via their username. By default, it\n * fetches achievements earned in the last hour.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @param payload.username The user for which to retrieve the recent achievements for.\n *\n * @param payload.recentMinutes Optional. Defaults to 60. How many minutes\n * back to fetch for the given user.\n *\n * @example\n * ```\n * const userRecentAchievements = await getUserRecentAchievements(\n *   authorization,\n *   { username: \"xelnia\" }\n * );\n * ```\n *\n * @returns An array containing metadata about a user's recently earned achievements.\n * ```json\n * [\n *   {\n *     date: '2023-05-23 22:32:24',\n *     hardcoreMode: true,\n *     achievementId: 51214,\n *     title: \"You're a special Champ!\",\n *     description: 'Win the Tournament as [You] on Hard with 1 attribute on max. and 1 attribute on min.',\n *     badgeName: '121991',\n *     points: 25,\n *     author: 'Som1',\n *     gameTitle: 'WWF King of the Ring',\n *     gameIcon: '/Images/062599.png',\n *     gameId: 6316,\n *     consoleName: 'Game Boy',\n *     badgeUrl: '/Badge/121991.png',\n *     gameUrl: '/game/6316'\n *   }\n * ]\n * ```\n */\nexport const getUserRecentAchievements = async (\n  authorization: AuthObject,\n  payload: { username: string; recentMinutes?: number }\n): Promise<UserRecentAchievement[]> => {\n  const { username, recentMinutes } = payload;\n\n  const queryParams: Record<string, string | number> = { u: username };\n\n  if (recentMinutes !== undefined) {\n    queryParams[\"m\"] = recentMinutes;\n  }\n\n  const url = buildRequestUrl(\n    apiBaseUrl,\n    \"/API_GetUserRecentAchievements.php\",\n    authorization,\n    queryParams\n  );\n\n  const rawResponse = await call<GetUserRecentAchievementsResponse>({ url });\n\n  return serializeProperties(rawResponse, {\n    shouldMapToBooleans: [\"HardcoreMode\"],\n  });\n};\n", "import {\n  apiBaseUrl,\n  buildRequestUrl,\n  call,\n  serializeProperties,\n} from \"../utils/internal\";\nimport type { AuthObject } from \"../utils/public\";\nimport type {\n  GetUserRecentlyPlayedGamesResponse,\n  UserRecentlyPlayedGames,\n} from \"./models\";\n\n/**\n * A call to this function will retrieve a list of a target user's\n * recently played games, via their username.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @param payload.username The user for which to retrieve the summary for.\n *\n * @param payload.count Optional. Defaults to 10. Max is 50. How many\n * recently played games for the user to retrieve.\n *\n * @param payload.offset Optional. Defaults to 0. Number of recently played\n * game entries to skip. This can be used for pagination.\n *\n * @example\n * ```\n * const userRecentlyPlayedGames = await getUserRecentlyPlayedGames(\n *   authorization,\n *   { username: \"xelnia\" }\n * );\n * ```\n *\n * @returns An array containing metadata about a user's recently played games.\n * ```json\n * [\n *   {\n *     gameId: 19010,\n *     consoleId: 21,\n *     consoleName: \"PlayStation 2\",\n *     title: \"Simpsons, The: Hit & Run\",\n *     imageIcon: \"/Images/066024.png\",\n *     lastPlayed: \"2022-10-24 22:05:12\",\n *     numPossibleAchievements: 131,\n *     possibleScore: 865,\n *     numAchieved: 23,\n *     scoreAchieved: 84,\n *     numAchievedHardcore: 23,\n *     scoreAchievedHardcore: 84\n *   }\n * ]\n * ```\n */\nexport const getUserRecentlyPlayedGames = async (\n  authorization: AuthObject,\n  payload: { username: string; offset?: number; count?: number }\n): Promise<UserRecentlyPlayedGames> => {\n  const { username, offset, count } = payload;\n\n  const queryParams: Record<string, string | number> = { u: username };\n\n  if (offset !== undefined) {\n    queryParams[\"o\"] = offset;\n  }\n\n  if (count !== undefined) {\n    queryParams[\"c\"] = count;\n  }\n\n  const url = buildRequestUrl(\n    apiBaseUrl,\n    \"/API_GetUserRecentlyPlayedGames.php\",\n    authorization,\n    queryParams\n  );\n\n  const rawResponse = await call<GetUserRecentlyPlayedGamesResponse>({ url });\n\n  return serializeProperties(rawResponse, {\n    shouldCastToNumbers: [\n      \"GameID\",\n      \"ConsoleID\",\n      \"NumPossibleAchievements\",\n      \"PossibleScore\",\n      \"NumAchieved\",\n      \"ScoreAchieved\",\n      \"NumAchievedHardcore\",\n      \"ScoreAchievedHardcore\",\n      \"MyVote\",\n    ],\n  });\n};\n", "import {\n  apiBaseUrl,\n  buildRequestUrl,\n  call,\n  serializeProperties,\n} from \"../utils/internal\";\nimport type { AuthObject } from \"../utils/public\";\nimport type { GetUserSummaryResponse, UserSummary } from \"./models\";\n\n/**\n * A call to this function will retrieve summary information about\n * a given user, targeted by username.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @param payload.username The user for which to retrieve the summary for.\n *\n * @param payload.recentGamesCount Optional. The number of recent games to return.\n * This defaults to 0.\n *\n * @param payload.recentAchievementsCount Optional. The number of recent achievements\n * to return. This defaults to 5.\n *\n * @example\n * ```\n * const userSummary = await getUserSummary(\n *   authorization,\n *   { username: \"xelnia\" }\n * );\n * ```\n *\n * @returns An object containing summary metadata about a target user.\n */\nexport const getUserSummary = async (\n  authorization: AuthObject,\n  payload: {\n    username: string;\n    recentGamesCount?: number;\n    recentAchievementsCount?: number;\n  }\n): Promise<UserSummary> => {\n  const { username, recentGamesCount, recentAchievementsCount } = payload;\n\n  const queryParams: Record<string, string | number> = { u: username };\n\n  if (recentGamesCount !== undefined) {\n    queryParams[\"g\"] = recentGamesCount;\n  }\n\n  if (recentAchievementsCount !== undefined) {\n    queryParams[\"a\"] = recentAchievementsCount;\n  }\n\n  const url = buildRequestUrl(\n    apiBaseUrl,\n    \"/API_GetUserSummary.php\",\n    authorization,\n    queryParams\n  );\n\n  const rawResponse = await call<GetUserSummaryResponse>({ url });\n\n  return serializeProperties(rawResponse, {\n    shouldCastToNumbers: [\n      \"GameID\",\n      \"ConsoleID\",\n      \"ID\",\n      \"LastGameID\",\n      \"ForumTopicID\",\n      \"activitytype\",\n      \"ContribCount\",\n      \"ContribYield\",\n      \"TotalPoints\",\n      \"TotalSoftcorePoints\",\n      \"TotalTruePoints\",\n      \"Permissions\",\n      \"NumPossibleAchievements\",\n      \"PossibleScore\",\n      \"NumAchieved\",\n      \"ScoreAchieved\",\n      \"NumAchievedHardcore\",\n      \"ScoreAchievedHardcore\",\n      \"Points\",\n      \"SoftcorePoints\",\n    ],\n    shouldMapToBooleans: [\n      \"Untracked\",\n      \"UserWallActive\",\n      \"IsAwarded\",\n      \"HardcoreAchieved\",\n    ],\n  });\n};\n", "import type { AuthObject } from \"./models\";\n\n/**\n * Accepts your RetroAchievements.org username and web API key. After\n * receiving these inputs, the function returns you a value that can be\n * used for the authentication parameter by any of the async calls in this\n * library.\n *\n * Your account's personal Web API Key can be found on the Settings page\n * of RetroAchievements.org. Do not use a Web API Key that is not associated\n * with your account.\n *\n * @returns An `AuthObject` that you can pass to any of the API call functions.\n *\n * @example\n * ```\n * const authorization = buildAuthorization({\n *   username: \"Scott\",\n *   webApiKey: \"LtjCwW16nJI7cqOyPIQtXk8v1cfF0tmO\"\n * });\n * ```\n */\nexport const buildAuthorization = (options: AuthObject): AuthObject => {\n  if (!options.username || !options.webApiKey) {\n    throw new Error(`\n      buildAuthorization() requires an object containing a\n      username and webApiKey. eg:\n\n      const authorization = buildAuthorization({\n        username: \"myUserName\",\n        webApiKey: \"myWebApiKey\"\n      })\n    `);\n  }\n\n  return options;\n};\n\n// This function simply returns what it's given, however the return\n// value has the added benefit of type safety.\n", "export async function compress(obj) {\n    const stream = new Blob([JSON.stringify(obj)])\n        .stream()\n        .pipeThrough(new CompressionStream(\"gzip\"));\n\n    const blob = await new Response(stream).blob();\n    const buffer = await blob.arrayBuffer();\n\n    return btoa(String.fromCharCode(...new Uint8Array(buffer)));\n}\n\nexport async function decompress(base64) {\n    const stream = new Blob([base64decode(base64)])\n        .stream()\n        .pipeThrough(new DecompressionStream(\"gzip\"));\n\n    const blob = await new Response(stream).blob();\n    return JSON.parse(await blob.text());\n}\n\nfunction base64decode(str) {\n    const binary = atob(str);\n    const len = binary.length;\n    const bytes = new Uint8Array(new ArrayBuffer(len));\n\n    for (let i = 0; i < len; i++) {\n        bytes[i] = binary.charCodeAt(i);\n    }\n\n    return bytes;\n}\n\n", "export function setOption(key, value) {\n    const options = JSON.parse(localStorage.getItem(\"options\"));\n    options[key] = value;\n    localStorage.setItem(\"options\", JSON.stringify(options));\n}\n\nexport function getOption(key) {\n    return JSON.parse(localStorage.getItem(\"options\"))[key];\n}\n\n", "import { getGameInfoAndUserProgress, getAchievementUnlocks } from \"@retroachievements/api\";\nimport { getOption } from \"./options.js\";\n\nconst sleep = ms => new Promise(resolve => setTimeout(() => resolve(), ms));\n\nconst sleepBase = 200;\nconst maxTries = 5;\nlet apiFailures = 0;\n\nexport async function wait() {\n    await sleep(sleepBase * Math.pow(2, apiFailures));\n}\n\nexport function resetBackoff() {\n    apiFailures = 0;\n}\n\nfunction formatDate(date) {\n    const year = date.getUTCFullYear();\n    const month = String(date.getUTCMonth() + 1).padStart(2, \"0\");\n    const day = String(date.getUTCDate()).padStart(2, \"0\");\n\n    switch (getOption(\"dateFormat\")) {\n        case 0:\n            return `${year}-${month}-${day}`;\n        case 1:\n            return `${month}/${day}/${year}`;\n        case 2:\n            return `${day}/${month}/${year}`;\n        case 3:\n            return `${month}-${day}-${year}`;\n        case 4:\n            return `${day}-${month}-${year}`;\n    }\n}\n\nexport async function checkGame(auth, username, id, startDate, endDate) {\n    let result;\n    for (let i = 0;; i++) {\n        try {\n            result = await getGameInfoAndUserProgress(auth, {\n                username,\n                gameId: id,\n                shouldIncludeHighestAwardMetadata: true,\n            });\n        } catch (e) {\n            apiFailures += 1;\n            await wait();\n            if (i < maxTries) continue;\n        }\n\n        break;\n    }\n\n    let status = \"failure\";\n    switch (result.highestAwardKind) {\n        case \"mastered\":\n            status = \"success mastered\";\n            break;\n        case \"beaten-hardcore\":\n            status = \"success\";\n            break;\n        default:\n            break;\n    }\n\n    const awardDate = new Date(result.highestAwardDate);\n    if (awardDate < startDate || awardDate > endDate) {\n        status = \"failure\";\n    }\n\n    const timestamp = result.highestAwardDate ? formatDate(awardDate) : \"N/A\";\n\n    const alt = document.getElementById(\"altUsername\").value;\n    if (username != alt && alt.length && status == \"failure\") {\n        const altResult = await checkGame(auth, alt, id, startDate);\n        if (altResult.status.includes(\"success\")) {\n            altResult.status += \" alt\";\n            return altResult;\n        }\n    }\n\n    return {\n        status,\n        title: result.title,\n        icon: result.imageIcon,\n        timestamp,\n    }\n}\n\nexport async function checkAchievement(auth, username, id, startDate, endDate) {\n    let info, game;\n    for (let i = 0;; i++) {\n        try {\n            info = await getAchievementUnlocks(auth, { count: 1, achievementId: id });\n            game = await getGameInfoAndUserProgress(auth, {\n                username,\n                gameId: info.game.id,\n                shouldIncludeHighestAwardMetadata: false,\n            });\n        } catch (e) {\n            apiFailures += 1;\n            await wait();\n            if (i < maxTries) continue;\n        }\n\n        break;\n    }\n\n    const achievement = game.achievements[info.achievement.id];\n    const unlocked = achievement.dateEarnedHardcore != \"\";\n    const unlockedDate = unlocked ? new Date(achievement.dateEarnedHardcore) : new Date(0);\n\n    const result = {\n        status: unlocked && (unlockedDate >= startDate && unlockedDate <= endDate) ? \"success\" : \"failure\",\n        timestamp: unlocked ? formatDate(unlockedDate) : \"N/A\",\n        title: info.achievement.title,\n        icon: `/Badge/${achievement.badgeName}.png`,\n    }\n\n    if (result.status == \"failure\") {\n        const alt = document.getElementById(\"altUsername\").value;\n        if (alt.length && alt != username) {\n            const altResult = await checkAchievement(auth, alt, id, startDate, endDate);\n            if (altResult.status == \"success\") {\n                altResult.status += \" alt\";\n                return altResult;\n            }\n        }\n    }\n\n    return result;\n}\n", "import { buildAuthorization } from \"@retroachievements/api\";\nimport { compress, decompress } from \"./compression.js\";\nimport { getOption, setOption } from \"./options.js\";\nimport * as api from \"./api.js\";\nimport \"./css/style.css\";\n\nfunction html(literals, ...expr) {\n    let string = \"\";\n\n    for (const [index, literal] of literals.entries()) {\n        string += literal;\n        if (index in expr) string += expr[index];\n    }\n\n    return string;\n}\n\nfunction resetDatePicker() {\n    let now = new Date();\n    document.getElementById(\"startdate\").valueAsDate = new Date(\n        now.getUTCFullYear(),\n        now.getUTCMonth(),\n        1\n    );\n    document.getElementById(\"enddate\").valueAsDate = now;\n}\nresetDatePicker();\n\nlet params = new URL(window.location).searchParams;\nif (params.has(\"data\")) {\n    let data = null;\n    if (params.has(\"c\") && params.get(\"c\") == \"0\") {\n        data = JSON.parse(atob(params.get(\"data\")));\n    } else {\n        data = await decompress(params.get(\"data\"));\n    }\n    const startDate = document.getElementById(\"startdate\").value;\n    const endDate = document.getElementById(\"enddate\").value;\n\n    document.getElementById(\"username\").value = data.username ?? \"\";\n    document.getElementById(\"altUsername\").value = data.alt ?? \"\";\n    document.getElementById(\"startdate\").value = data.startDate ?? startDate;\n    document.getElementById(\"enddate\").value = data.endDate ?? endDate;\n    document.getElementById(\"submission\").value = data.submission ?? \"\";\n    document.getElementById(\"optionCheckDate\").checked = data.optionCheckDate ?? true;\n}\n\nasync function getAuthorization() {\n    if (!localStorage.getItem(\"auth\")) {\n        return await showAuthModal();\n    } else {\n        const obj = JSON.parse(localStorage.getItem(\"auth\"));\n        if (\"apikey\" in obj) {\n            obj.webApiKey = obj.apikey;\n            delete obj.apikey;\n            localStorage.setItem(\"auth\", JSON.stringify(obj));\n        }\n        const auth = buildAuthorization(obj);\n        auth.toString = function() {\n            return `z=${this.username}&y=${this.webApiKey}`;\n        }\n        return auth;\n    }\n}\n\nfunction showAuthModal() {\n    let template = document.getElementById(\"authModalTemplate\");\n    let modal = template.content.cloneNode(true);\n    let button = modal.children[0].querySelector(\"button\");\n    document.body.appendChild(modal);\n\n    return new Promise(resolve => {\n        button.addEventListener(\"click\", ev => {\n            let modal = document.querySelector(\"div.authModal\");\n            let auth = {\n                username: modal.querySelector(\"input[name='username']\").value,\n                webApiKey: modal.querySelector(\"input[name='apikey']\").value,\n            };\n            if (modal.querySelector(\"input[name='saveinfo']\").checked) {\n                localStorage.setItem(\"auth\", JSON.stringify(auth));\n            }\n            document.body.removeChild(modal);\n            resolve(buildAuthorization(auth));\n        });\n    });\n}\n\ndocument.getElementById(\"verify\").addEventListener(\"click\", async () => {\n    const auth = await getAuthorization();\n    const username = document.getElementById(\"username\");\n    const altUsername = document.getElementById(\"altUsername\");\n    const submission = document.getElementById(\"submission\");\n    const startDate = document.getElementById(\"startdate\");\n    const endDate = document.getElementById(\"enddate\");\n\n    api.resetBackoff();\n\n    if (startDate.value == \"\") {\n        startDate.style.backgroundColor = \"red\";\n        startDate.addEventListener(\"focus\", () => startDate.style.backgroundColor = \"revert\", { once: true });\n        return;\n    }\n\n    const games = Array.from(\n        submission.value.matchAll(\"https://(?:www.)?retroachievements.org/game/([0-9]+)\")\n    ).map(([_, id]) => id);\n\n    const achievements = Array.from(\n        submission.value.matchAll(\"https://(?:www.)?retroachievements.org/achievement/([0-9]+)\")\n    ).map(([_, id]) => id);\n\n    switchToTab(\"output\");\n    username.disabled = true;\n    altUsername.disabled = true;\n    startDate.disabled = true;\n    endDate.disabled = true;\n\n    output.innerHTML = html`\n        <h1>Games</h1><hr />\n        ${games.map(id => html`<div class=\"game\">\n            <div class=\"icon\"></div>\n            <a class=\"title\" href=\"https://retroachievements.org/game/${id}\">${id}</a>\n            <span class=\"timestamp\"></span>\n            <div class=\"status\">?</div>\n        </div>`).join(\"\")}\n\n        <h1>Achievements</h1><hr />\n        ${achievements.map(id => html`<div class=\"achievement\">\n            <div class=\"icon\"></div>\n            <a class=\"title\" href=\"https://retroachievements.org/achievement/${id}\">${id}</a>\n            <span class=\"timestamp\"></span>\n            <div class=\"status\">?</div>\n        </div>`).join(\"\")}\n    `;\n\n    const render = async (elem, func) => {\n        const id = elem.querySelector(\".title\").textContent;\n        // add one day to end date to account for it being unlocked during that day\n        const end = endDate.valueAsDate;\n        end.setDate(end.getDate() + 1);\n        const obj = await func(auth, username.value, id, startDate.valueAsDate, end);\n        const statusElem = elem.querySelector(\".status\")\n        statusElem.classList.add(...obj.status.split(\" \"));\n        statusElem.textContent = obj.status.includes(\"success\") ?\n            obj.status.includes(\"alt\") ? \"A\" : \"\u2713\" : \"X\";\n\n        const img = document.createElement(\"img\");\n        img.src = `https://media.retroachievements.org${obj.icon}`;\n        elem.querySelector(\".icon\").appendChild(img);\n\n        elem.querySelector(\".title\").textContent = obj.title;\n        elem.querySelector(\".timestamp\").textContent = obj.timestamp;\n    };\n\n    for (const elem of output.querySelectorAll(\".game\")) {\n        await render(elem, api.checkGame);\n        await api.wait();\n    }\n\n    for (const elem of output.querySelectorAll(\".achievement\")) {\n        await render(elem, api.checkAchievement);\n        await api.wait();\n    }\n\n    username.disabled = false;\n    altUsername.disabled = false;\n    startDate.disabled = false;\n    endDate.disabled = false;\n});\n\ndocument.getElementById(\"clear\").addEventListener(\"click\", () => {\n    document.getElementById(\"username\").value = \"\";\n    document.getElementById(\"submission\").value = \"\";\n    document.getElementById(\"output\").innerHTML = \"\";\n    document.getElementById(\"username\").disabled = false;\n    document.getElementById(\"startdate\").disabled = false;\n    switchToTab(\"submission\");\n});\n\ndocument.getElementById(\"optionResetAuth\").addEventListener(\"click\", () => {\n    localStorage.removeItem(\"auth\");\n});\n\ndocument.getElementById(\"optionExportURL\").addEventListener(\"click\", async () => {\n    const username = document.getElementById(\"username\").value;\n    const alt = document.getElementById(\"altUsername\").value;\n    const startDate = document.getElementById(\"startdate\").value;\n    const endDate = document.getElementById(\"enddate\").value;\n    const submission = document.getElementById(\"submission\").value;\n    const optionCheckDate = document.getElementById(\"optionCheckDate\").checked;\n\n    const data = await compress({\n        username, alt, startDate, endDate, submission, optionCheckDate\n    });\n\n    const url = new URL(window.location.href);\n    url.searchParams.set(\"data\", data);\n    window.location.href = url.href;\n});\n\ndocument.getElementById(\"optionCheckDate\").addEventListener(\"change\", ev => {\n    const datePicker = document.getElementById(\"startdate\");\n    if (ev.target.checked) {\n        datePicker.disabled = false;\n        resetDatePicker();\n    } else {\n        datePicker.disabled = true;\n        datePicker.valueAsDate = new Date(0);\n    }\n});\n\ndocument.getElementById(\"optionDateFormat\").addEventListener(\"change\", ev => {\n    setOption(\"dateFormat\", ev.target.selectedIndex);\n});\n\nif (!localStorage.getItem(\"options\")) {\n    localStorage.setItem(\"options\", JSON.stringify({\n        dateFormat: 0,\n    }));\n} else {\n    const options = JSON.parse(localStorage.getItem(\"options\"));\n    document.getElementById(\"optionDateFormat\").selectedIndex = options.dateFormat;\n}\n\nfor (const elem of document.querySelectorAll(\"#tabs > div\")) {\n    const target = elem.dataset.target;\n    elem.addEventListener(\"mousedown\", () => {\n        switchToTab(target);\n    });\n}\n\nfunction switchToTab(name) {\n    document.getElementById(name).style.display = \"block\";\n    for (const elem of document.querySelectorAll(`#content > :not(#${name})`)) {\n        elem.style.display = \"none\";\n    }\n    for (const elem of document.querySelectorAll(\"#tabs > div\")) {\n        elem.classList.remove(\"selected\");\n        if (elem.dataset.target == name) {\n            elem.classList.add(\"selected\");\n        }\n    }\n}\n\n"],
  "mappings": "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",
  "names": ["apiBaseUrl", "buildRequestUrl", "baseUrl", "endpointUrl", "authObject", "args", "withArgs", "replaceAll", "queryParamValues", "z", "username", "y", "webApiKey", "argKey", "argValue", "Object", "entries", "includes", "replace", "String", "URLSearchParams", "toString", "call", "async", "url", "config", "headers", "Headers", "rawResponse", "fetch", "undefined", "window", "ok", "Error", "status", "statusText", "json", "s", "o", "serializeProperties", "originalData", "options", "shouldCastToNumbers", "shouldMapToBooleans", "returnValue", "Array", "isArray", "cleanedArray", "entity", "push", "cleanedObject", "originalKey", "originalValue", "sanitizedValue", "Number", "_extends", "naiveCamelCase", "toUpperCase", "toLowerCase", "camelCased", "charAt", "slice", "getAchievementUnlocks", "authorization", "payload", "achievementId", "offset", "count", "queryParams", "a", "c", "ClaimSetType", "ClaimStatus", "ClaimType", "AchievementDistributionFlags", "GameExtendedClaimType", "AchievementDistributionFlags", "GameExtendedClaimType", "getGameInfoAndUserProgress", "async", "authorization", "payload", "gameId", "username", "shouldIncludeHighestAwardMetadata", "params", "g", "u", "a", "url", "buildRequestUrl", "apiBaseUrl", "rawResponse", "call", "serializeProperties", "shouldCastToNumbers", "buildAuthorization", "options", "username", "webApiKey", "Error", "compress", "obj", "stream", "buffer", "decompress", "base64", "base64decode", "blob", "str", "binary", "len", "bytes", "i", "setOption", "key", "value", "options", "getOption", "sleep", "ms", "resolve", "sleepBase", "maxTries", "apiFailures", "wait", "resetBackoff", "formatDate", "date", "year", "month", "day", "getOption", "checkGame", "auth", "username", "id", "startDate", "endDate", "result", "i", "_", "status", "awardDate", "timestamp", "alt", "altResult", "checkAchievement", "info", "game", "n", "achievement", "unlocked", "unlockedDate", "html", "literals", "expr", "string", "index", "literal", "resetDatePicker", "now", "params", "data", "decompress", "startDate", "endDate", "getAuthorization", "obj", "auth", "E", "showAuthModal", "modal", "button", "resolve", "ev", "username", "altUsername", "submission", "resetBackoff", "games", "_", "id", "achievements", "switchToTab", "render", "elem", "func", "end", "statusElem", "img", "checkGame", "wait", "checkAchievement", "alt", "optionCheckDate", "compress", "url", "datePicker", "setOption", "options", "target", "name"]
}
