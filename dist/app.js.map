{"version":3,"file":"app.js.map","mappings":"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","names":["apiBaseUrl","buildRequestUrl","baseUrl","endpointUrl","authObject","args","withArgs","replaceAll","queryParamValues","z","username","y","webApiKey","argKey","argValue","Object","entries","includes","replace","String","URLSearchParams","toString","call","async","url","config","headers","Headers","rawResponse","fetch","undefined","window","ok","Error","status","statusText","json","s","o","serializeProperties","originalData","options","shouldCastToNumbers","shouldMapToBooleans","returnValue","Array","isArray","cleanedArray","entity","push","cleanedObject","originalKey","originalValue","sanitizedValue","Number","_extends","naiveCamelCase","toUpperCase","toLowerCase","camelCased","charAt","slice","getAchievementUnlocks","authorization","payload","achievementId","offset","count","queryParams","a","c","ClaimSetType","ClaimStatus","ClaimType","AchievementDistributionFlags","GameExtendedClaimType","getGameInfoAndUserProgress","gameId","shouldIncludeHighestAwardMetadata","params","g","u","buildAuthorization","compress","obj","stream","buffer","decompress","base64","base64decode","blob","str","binary","len","bytes","i","setOption","key","value","getOption","sleep","ms","resolve","sleepBase","maxTries","apiFailures","wait","resetBackoff","formatDate","date","year","month","day","checkGame","auth","id","startDate","endDate","result","_","awardDate","timestamp","alt","altResult","checkAchievement","info","game","n","achievement","unlocked","unlockedDate","html","literals","expr","string","index","literal","resetDatePicker","now","data","getAuthorization","E","showAuthModal","modal","button","ev","altUsername","submission","games","achievements","switchToTab","render","elem","func","end","statusElem","img","optionCheckDate","datePicker","target","name"],"ignoreList":[],"sources":["../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+tar.gz_vyvfriklwvtsuiyi2sn2u7rusu/node_modules/@retroachievements/api/src/utils/internal/apiBaseUrl.ts","../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+tar.gz_vyvfriklwvtsuiyi2sn2u7rusu/node_modules/@retroachievements/api/src/utils/internal/buildRequestUrl.ts","../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+tar.gz_vyvfriklwvtsuiyi2sn2u7rusu/node_modules/@retroachievements/api/src/utils/internal/call.ts","../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+tar.gz_vyvfriklwvtsuiyi2sn2u7rusu/node_modules/@retroachievements/api/src/utils/internal/serializeProperties.ts","../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+tar.gz_vyvfriklwvtsuiyi2sn2u7rusu/node_modules/@retroachievements/api/src/achievement/getAchievementUnlocks.ts","../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+tar.gz_vyvfriklwvtsuiyi2sn2u7rusu/node_modules/@retroachievements/api/src/feed/models/claim-set-type.enum.ts","../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+tar.gz_vyvfriklwvtsuiyi2sn2u7rusu/node_modules/@retroachievements/api/src/feed/models/claim-status.enum.ts","../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+tar.gz_vyvfriklwvtsuiyi2sn2u7rusu/node_modules/@retroachievements/api/src/feed/models/claim-type.enum.ts","../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+tar.gz_vyvfriklwvtsuiyi2sn2u7rusu/node_modules/@retroachievements/api/src/game/models/achievement-distribution-flags.enum.ts","../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+tar.gz_vyvfriklwvtsuiyi2sn2u7rusu/node_modules/@retroachievements/api/src/game/models/get-game-extended-response.model.ts","../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+tar.gz_vyvfriklwvtsuiyi2sn2u7rusu/node_modules/@retroachievements/api/src/ticket/getTicketData.ts","../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+tar.gz_vyvfriklwvtsuiyi2sn2u7rusu/node_modules/@retroachievements/api/src/user/getGameInfoAndUserProgress.ts","../node_modules/.pnpm/@retroachievements+api@https+++codeload.github.com+monkey-bug+retroachievements-api-js+tar.gz_vyvfriklwvtsuiyi2sn2u7rusu/node_modules/@retroachievements/api/src/utils/public/buildAuthorization.ts","../src/compression.js","../src/options.js","../src/api.js","../src/app.js"],"sourcesContent":["export const apiBaseUrl = \"https://retroachievements.org/API\";\n","import type { AuthObject } from \"../public/models\";\n\nexport const buildRequestUrl = (\n  baseUrl: string,\n  endpointUrl: string,\n  authObject: AuthObject,\n  args: Record<string, string | number> = {}\n) => {\n  const concatenated = `${baseUrl}/${endpointUrl}`;\n  const withoutDoubleSlashes = concatenated.replaceAll(/([^:]\\/)\\/+/g, \"$1\");\n\n  let withArgs = withoutDoubleSlashes;\n\n  // `z` and `y` are expected query params from the RA API.\n  // Authentication is handled purely by query params.\n  const queryParamValues: Record<string, string> = {\n    z: authObject.username,\n    y: authObject.webApiKey,\n  };\n\n  for (const [argKey, argValue] of Object.entries(args)) {\n    // \"abc.com/some-route/:foo/some-path\" & {\"foo\": 4} --> \"abc.com/some-route/4/some-path\"\n    if (withArgs.includes(`:${argKey}`)) {\n      withArgs = withArgs.replace(`:${argKey}`, String(argValue));\n    } else if (argValue !== undefined) {\n      queryParamValues[argKey] = String(argValue);\n    }\n  }\n\n  const queryString = new URLSearchParams(queryParamValues).toString();\n  return `${withArgs}?${queryString}`;\n};\n","declare const PACKAGE_VERSION: string | undefined;\n\n/**\n * Fetch an HTTP resource. This is publicly exposed in the\n * event you would like to access an endpoint that this\n * library does not currently support.\n *\n * UNLESS YOU'RE SURE OF WHAT YOU'RE DOING, YOU PROBABLY\n * SHOULDN'T USE THIS FUNCTION.\n */\nexport const call = async <\n  T extends readonly any[] | Record<string, any>\n>(config: {\n  url: string;\n}) => {\n  const { url } = config;\n\n  const headers = new Headers({\n    \"User-Agent\": `RetroAchievements-api-js/${PACKAGE_VERSION ?? \"Unknown\"}`,\n  });\n\n  const rawResponse = await fetch(url, (typeof window !== undefined) ? {} : { headers });\n\n  if (!rawResponse.ok) {\n    throw new Error(\n      `HTTP Error: Status ${rawResponse.status} ${rawResponse.statusText}`\n    );\n  }\n\n  return (await rawResponse.json()) as T;\n};\n","/* eslint-disable sonarjs/cognitive-complexity */\n/* eslint-disable sonarjs/prefer-immediate-return */\n\nexport const serializeProperties = (\n  originalData: any,\n  options: Partial<{\n    shouldCastToNumbers: string[];\n    shouldMapToBooleans: string[];\n  }> = {}\n) => {\n  const { shouldCastToNumbers, shouldMapToBooleans } = options;\n\n  let returnValue = originalData;\n\n  if (Array.isArray(originalData)) {\n    const cleanedArray: any[] = [];\n\n    for (const entity of originalData) {\n      cleanedArray.push(serializeProperties(entity, options));\n    }\n\n    returnValue = cleanedArray;\n  } else if (!Array.isArray(originalData) && originalData instanceof Object) {\n    let cleanedObject: Record<string, any> = {};\n\n    for (const [originalKey, originalValue] of Object.entries(originalData)) {\n      let sanitizedValue = originalValue;\n      if (shouldCastToNumbers?.includes(originalKey)) {\n        sanitizedValue = originalValue === null ? null : Number(originalValue);\n      }\n\n      if (shouldMapToBooleans?.includes(originalKey)) {\n        if (originalValue === null) {\n          sanitizedValue = null;\n        } else {\n          sanitizedValue = String(originalValue) === \"1\" ? true : false;\n        }\n      }\n\n      cleanedObject = {\n        ...cleanedObject,\n        [naiveCamelCase(originalKey)]: serializeProperties(\n          sanitizedValue,\n          options\n        ),\n      };\n    }\n\n    returnValue = cleanedObject;\n  }\n\n  return returnValue;\n};\n\nconst naiveCamelCase = (originalValue: string) => {\n  // \"ID\" --> \"id\", \"URL\" --> \"url\"\n  if (originalValue.toUpperCase() === originalValue) {\n    return originalValue.toLowerCase();\n  }\n\n  // \"GameID\" -> \"gameID\"\n  let camelCased =\n    originalValue.charAt(0).toLowerCase() + originalValue.slice(1);\n\n  // \"gameID\" -> \"gameId\"\n  camelCased = camelCased.replaceAll(\"ID\", \"Id\");\n\n  // \"badgeURL\" --> \"badgeUrl\"\n  camelCased = camelCased.replaceAll(\"URL\", \"Url\");\n\n  // \"rAPoints\" -> \"raPoints\"\n  camelCased = camelCased.replaceAll(\"rA\", \"ra\");\n\n  // \"visibleUserawards\" -> \"visibleUserAwards\"\n  camelCased = camelCased.replaceAll(\"visibleUserawards\", \"visibleUserAwards\");\n\n  return camelCased;\n};\n","import type { ID } from \"../utils/internal\";\nimport {\n  apiBaseUrl,\n  buildRequestUrl,\n  call,\n  serializeProperties,\n} from \"../utils/internal\";\nimport type { AuthObject } from \"../utils/public\";\nimport type {\n  AchievementUnlocksMetadata,\n  GetAchievementUnlocksResponse,\n} from \"./models\";\n\n/**\n * A call to this function will retrieve a list of users who\n * have earned a given achievement, targeted by the achievement's ID.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @param payload.achievementId The target achievement we want to\n * retrieve the unlocks list for. If unknown, this can be found\n * by navigating to the achievement's page on the RetroAchievements.org\n * website. eg: https://retroachievements.org/achievement/13876 has an\n * ID of 13876.\n *\n * @param payload.offset Defaults to 0. The number of entries to skip.\n *\n * @param payload.count Defaults to 50, has a max of 500.\n *\n * @example\n * ```\n * const achievementUnlocks = await getAchievementUnlocks(\n *   authorization,\n *   { achievementId: 13876 }\n * );\n * ```\n *\n * @returns An array containing metadata about unlocks for\n * the target achievement.\n * ```\n * [\n *   {\n *     user: 'Podgicus0305',\n *     raPoints: 15544,\n *     dateAwarded: '2022-07-12 19:06:34',\n *     hardcoreMode: true\n *   }\n * ]\n * ```\n */\nexport const getAchievementUnlocks = async (\n  authorization: AuthObject,\n  payload: { achievementId: ID; offset?: number; count?: number }\n): Promise<AchievementUnlocksMetadata> => {\n  const { achievementId, offset, count } = payload;\n\n  const queryParams: Record<string, number | string> = { a: achievementId };\n\n  if (offset) {\n    queryParams.o = offset;\n  }\n\n  if (count) {\n    queryParams.c = count;\n  }\n\n  const url = buildRequestUrl(\n    apiBaseUrl,\n    \"/API_GetAchievementUnlocks.php\",\n    authorization,\n    queryParams\n  );\n\n  const rawResponse = await call<GetAchievementUnlocksResponse>({ url });\n\n  return serializeProperties(rawResponse, {\n    shouldCastToNumbers: [\n      \"ID\",\n      \"Points\",\n      \"TrueRatio\",\n      \"RAPoints\",\n      \"RASoftcorePoints\",\n    ],\n    shouldMapToBooleans: [\"HardcoreMode\"],\n  });\n};\n","export enum ClaimSetType {\n  NewSet = 0,\n  Revision = 1,\n}\n","export enum ClaimStatus {\n  Active = 0,\n  Complete = 1,\n  Dropped = 2,\n}\n","export enum ClaimType {\n  Primary = 0,\n  Collaboration = 1,\n}\n","export enum AchievementDistributionFlags {\n  CoreAchievements = 3,\n  UnofficialAchievements = 5,\n}\n","// NOTE: This cannot be a true extension of the `GetGameResponse`\n// interface because the return types for many of these fields\n// are different from the actual RA API.\n\nenum GameExtendedClaimType {\n  Primary = \"0\",\n  Collaboration = \"1\",\n}\n\nexport interface GameExtendedRawAchievementEntity {\n  ID: string;\n  NumAwarded: string;\n  NumAwardedHardcore: string;\n  Title: string;\n  Description: string;\n  Points: string;\n  TrueRatio: string;\n  Author: string;\n  DateModified: string;\n  DateCreated: string;\n  BadgeName: string;\n  DisplayOrder: string;\n  MemAddr: string;\n}\n\ninterface GameExtendedRawClaimEntity {\n  User: string;\n  SetType: string;\n  ClaimType: GameExtendedClaimType;\n  Created: string;\n  Expiration: string;\n}\n\nexport interface GetGameExtendedResponse {\n  ID: number;\n  Title: string;\n  ConsoleID: number;\n  ForumTopicID: number;\n  Flags: number;\n  ImageIcon: string;\n  ImageTitle: string;\n  ImageIngame: string;\n  ImageBoxArt: string;\n  Publisher: string;\n  Developer: string;\n  Genre: string;\n  Released: string;\n  IsFinal: boolean;\n  ConsoleName: string;\n  RichPresencePatch: string;\n  NumAchievements: number;\n  NumDistinctPlayersCasual: string;\n  NumDistinctPlayersHardcore: string;\n  Claims: GameExtendedRawClaimEntity[];\n  Achievements: Record<number, GameExtendedRawAchievementEntity> | [];\n}\n","import type { ID } from \"../utils/internal\";\nimport {\n  apiBaseUrl,\n  buildRequestUrl,\n  call,\n  serializeProperties,\n} from \"../utils/internal\";\nimport type { AuthObject } from \"../utils/public\";\nimport type {\n  AchievementTicketStats,\n  GameTicketStats,\n  MostTicketedGames,\n  RecentTickets,\n  TicketEntity,\n  UserTicketStats,\n} from \"./models\";\n\ninterface GetTicketDataAllPayloadValues {\n  ticketId?: string | number;\n  offset?: number;\n  count?: number;\n  isGettingMostTicketedGames?: true;\n  username?: string;\n  gameId?: string | number;\n  isGettingTicketsForUnofficialAchievements?: true;\n  shouldReturnTicketsList?: true;\n  achievementId?: string | number;\n}\n\n/**\n * BEGIN: Function overload definitions\n */\n\n/**\n * A call to this function will retrieve ticket metadata information\n * about a single achievement ticket, targeted by its ticket ID.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @param payload.ticketId The ID of the ticket to get information about.\n *\n * @example\n * ```\n * const ticketData = await getTicketData(\n *   authorization,\n *   { ticketId: 12345 }\n * );\n * ```\n *\n * @returns An object containing metadata about a target ticket.\n */\nexport function getTicketData(\n  authorization: AuthObject,\n  payload: { ticketId: ID }\n): Promise<TicketEntity>;\n\n/**\n * A call to this function will retrieve ticket metadata information\n * about the latest opened achievement tickets on RetroAchievements.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @param payload.count Optional. Defaults to 10. Max is 100.\n * How many tickets to retrieve.\n *\n * @param payload.offset Optional. Defaults to 0.\n * Number of tickets to skip. This can be used for pagination.\n *\n * @example\n * ```\n * const ticketData = await getTicketData(authorization);\n * ```\n *\n * @returns A list of the most recently opened tickets on the site.\n */\nexport function getTicketData(\n  authorization: AuthObject,\n  payload?: Partial<{ offset: number; count: number }>\n): Promise<RecentTickets>;\n\n/**\n * A call to this function will retrieve the games on the site with\n * the highest count of opened achievement tickets.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @param payload.count Optional. Defaults to 10. Max is 100.\n * How many ticketed games to retrieve.\n *\n * @param payload.offset Optional. Defaults to 0.\n * Number of games to skip. This can be used for pagination.\n *\n * @example\n * ```\n * const ticketData = await getTicketData(\n *   authorization,\n *   { isGettingMostTicketedGames: true }\n * );\n * ```\n *\n * @returns A list of the most recently opened tickets on the site.\n */\nexport function getTicketData(\n  authorization: AuthObject,\n  payload: { isGettingMostTicketedGames: true; offset?: number; count?: number }\n): Promise<MostTicketedGames>;\n\n/**\n * A call to this function will retrieve an achievement developer's\n * ticket stats, targeted by that developer's username.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @param payload.username The developer's account username to retrieve\n * ticket stats for.\n *\n * @example\n * ```\n * const ticketData = await getTicketData(\n *   authorization,\n *   { username: \"xelnia\" }\n * );\n * ```\n *\n * @returns An achievement developer's ticket stats.\n */\nexport function getTicketData(\n  authorization: AuthObject,\n  payload: { username: string }\n): Promise<UserTicketStats>;\n\n/**\n * A call to this function will retrieve a game's ticket stats, targeted\n * by the game's ID. If you are unsure of a game's ID, visit its page\n * on the RetroAchievements website and copy the number at the end of the URL.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @param payload.gameId The game ID to fetch ticket stats for.\n *\n * @param payload.isGettingTicketsForUnofficialAchievements Optional. Fetch stats\n * for unofficial/non-core achievements that have tickets.\n *\n * @param payload.shouldReturnTicketsList Optional. If true, not only fetches a\n * game's ticket stats, but also returns a list of tickets for the game.\n *\n * @example\n * ```\n * const ticketData = await getTicketData(\n *   authorization,\n *   { gameId: 14_402 }\n * );\n * ```\n *\n * @returns A game's ticket stats, potentially also including the ticket list.\n */\nexport function getTicketData(\n  authorization: AuthObject,\n  payload: {\n    gameId: ID;\n    isGettingTicketsForUnofficialAchievements?: true;\n    shouldReturnTicketsList?: true;\n  }\n): Promise<GameTicketStats>;\n\n/**\n * A call to this function will retrieve the an achievement's\n * ticket stats, targeted by the achievement's ID. If you are unsure\n * of an achievement's ID, open its page on the RetroAchievements\n * website and copy the number at the end of the URL.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @param payload.achievementId The ID of the achievement to fetch ticket\n * stats for.\n *\n * @example\n * ```\n * const ticketData = await getTicketData(\n *   authorization,\n *   { achievementId: 12345 }\n * );\n * ```\n *\n * @returns An achievement developer's ticket stats.\n */\nexport function getTicketData(\n  authorization: AuthObject,\n  payload: { achievementId: ID }\n): Promise<AchievementTicketStats>;\n\n/**\n * END: Function overload definitions\n */\n\nexport async function getTicketData(\n  authorization: AuthObject,\n  payload: GetTicketDataAllPayloadValues = {}\n) {\n  const queryParams = buildGetTicketDataQueryParams(payload);\n\n  const url = buildRequestUrl(\n    apiBaseUrl,\n    \"/API_GetTicketData.php\",\n    authorization,\n    queryParams\n  );\n\n  const rawResponse = await call({ url });\n\n  return serializeProperties(rawResponse, {\n    shouldCastToNumbers: [\n      \"ID\",\n      \"AchievementID\",\n      \"Points\",\n      \"GameID\",\n      \"ReportType\",\n      \"ReportState\",\n      \"OpenTickets\",\n    ],\n    shouldMapToBooleans: [\"Hardcore\"],\n  });\n}\n\nconst buildGetTicketDataQueryParams = (\n  payload: GetTicketDataAllPayloadValues\n) => {\n  const {\n    ticketId,\n    isGettingMostTicketedGames,\n    username,\n    gameId,\n    isGettingTicketsForUnofficialAchievements,\n    shouldReturnTicketsList,\n    achievementId,\n  } = payload;\n\n  let queryParams: Record<string, string | number> = {};\n\n  if (ticketId !== undefined) {\n    queryParams[\"i\"] = ticketId;\n  } else if (isGettingMostTicketedGames) {\n    queryParams[\"f\"] = \"1\";\n    queryParams = applyPaginationQueryParams(queryParams, payload);\n  } else if (username) {\n    queryParams[\"u\"] = username;\n  } else if (gameId) {\n    queryParams[\"g\"] = gameId;\n\n    if (isGettingTicketsForUnofficialAchievements) {\n      queryParams[\"f\"] = \"5\";\n    }\n\n    if (shouldReturnTicketsList) {\n      queryParams[\"d\"] = \"1\";\n    }\n  } else if (achievementId) {\n    queryParams[\"a\"] = achievementId;\n  } else {\n    queryParams = applyPaginationQueryParams(queryParams, payload);\n  }\n\n  return queryParams;\n};\n\nconst applyPaginationQueryParams = (\n  currentParams: Record<string, string | number>,\n  payload: Partial<{ count: number; offset: number }>\n) => {\n  const modifiedParams = { ...currentParams };\n\n  if (payload.count !== undefined) {\n    modifiedParams[\"c\"] = payload.count;\n  }\n\n  if (payload.offset !== undefined) {\n    modifiedParams[\"o\"] = payload.offset;\n  }\n\n  return modifiedParams;\n};\n","import type { ID } from \"../utils/internal\";\nimport {\n  apiBaseUrl,\n  buildRequestUrl,\n  call,\n  serializeProperties,\n} from \"../utils/internal\";\nimport type { AuthObject } from \"../utils/public\";\nimport type {\n  GameInfoAndUserProgress,\n  GetGameInfoAndUserProgressResponse,\n} from \"./models\";\n\n/**\n * A call to this function will retrieve extended metadata\n * about a game, in addition to a user's progress about a game.\n * This is targeted via a game's unique ID and a given username.\n *\n * @param authorization An object containing your username and webApiKey.\n * This can be constructed with `buildAuthorization()`.\n *\n * @param payload.gameId The unique game ID. If you are unsure, open the\n * game's page on the RetroAchievements.org website. For example, Dragster's\n * URL is https://retroachievements.org/game/14402. We can see from the\n * URL that the game ID is \"14402\".\n *\n * @param payload.username The user for which to retrieve the\n * game progress for.\n *\n * @param payload.shouldIncludeHighestAwardMetadata Include a \"HighestAwardKind\"\n * and a \"HighestAwardDate\" for the given user and game ID.\n *\n * @example\n * ```\n * const gameInfoAndUserProgress = await getGameInfoAndUserProgress(\n *   authorization,\n *   { gameId: 14402, username: \"wv_pinball\" }\n * );\n * ```\n *\n * @returns An object containing extended metadata about a target game,\n * with attached progress for a target username.\n * ```json\n * {\n *   id: 14402,\n *   title: \"Dragster\",\n *   consoleId: 25,\n *   forumTopicId: 9145,\n *   flags: 0,\n *   imageIcon: \"/Images/026368.png\",\n *   imageTitle: \"/Images/026366.png\",\n *   imageIngame: \"/Images/026367.png\",\n *   imageBoxArt: \"/Images/026365.png\",\n *   publisher: \"Activision\",\n *   developer: \"David Crane\",\n *   genre: \"Racing\",\n *   released: \"1980\",\n *   isFinal: false,\n *   consoleName: \"Atari 2600\",\n *   richPresencePatch: \"2b92fa1bf9635c303b3b7f8feea3ed3c\",\n *   numAchievements: 12,\n *   numDistinctPlayersCasual: 454,\n *   numDistinctPlayersHardcore, 323\n *   claims: [],\n *   achievements: {\n *     '79434': {\n *       id: 79434,\n *       numAwarded: 338,\n *       numAwardedHardcore: 253,\n *       title: \"Novice Dragster Driver 1\",\n *       description: \"Complete your very first race in game 1.\",\n *       points: 1,\n *       trueRatio: 1,\n *       author: \"Boldewin\",\n *       dateModified: \"2019-08-01 19:03:46\",\n *       dateCreated: \"2019-07-31 18:49:57\",\n *       badgeName: \"85541\",\n *       displayOrder: 0,\n *       memAddr: \"f5c41fa0b5fa0d5fbb8a74c598f18582\",\n *       dateEarned: '2022-08-23 22:56:38',\n *       dateEarnedHardcore: '2022-08-23 22:56:38'\n *     }\n *   },\n *   numAwardedToUser: 12,\n *   numAwardedToUserHardcore: 12,\n *   userCompletion: \"100.00%\",\n *   userCompletionHardcore: \"100.00%\"\n * }\n * ```\n */\nexport const getGameInfoAndUserProgress = async (\n  authorization: AuthObject,\n  payload: {\n    gameId: ID;\n    username: string;\n    shouldIncludeHighestAwardMetadata?: boolean;\n  }\n): Promise<GameInfoAndUserProgress> => {\n  const { gameId, username, shouldIncludeHighestAwardMetadata } = payload;\n\n  const params: Record<string, any> = {\n    g: gameId,\n    u: username,\n  };\n  if (shouldIncludeHighestAwardMetadata) {\n    params.a = 1;\n  }\n\n  const url = buildRequestUrl(\n    apiBaseUrl,\n    \"/API_GetGameInfoAndUserProgress.php\",\n    authorization,\n    params\n  );\n\n  const rawResponse = await call<GetGameInfoAndUserProgressResponse>({ url });\n\n  return serializeProperties(rawResponse, {\n    shouldCastToNumbers: [\n      \"ID\",\n      \"NumAwarded\",\n      \"NumAwardedHardcore\",\n      \"Points\",\n      \"TrueRatio\",\n      \"DisplayOrder\",\n      \"NumDistinctPlayersCasual\",\n      \"NumDistinctPlayersHardcore\",\n    ],\n  });\n};\n","import type { AuthObject } from \"./models\";\n\n/**\n * Accepts your RetroAchievements.org username and web API key. After\n * receiving these inputs, the function returns you a value that can be\n * used for the authentication parameter by any of the async calls in this\n * library.\n *\n * Your account's personal Web API Key can be found on the Settings page\n * of RetroAchievements.org. Do not use a Web API Key that is not associated\n * with your account.\n *\n * @returns An `AuthObject` that you can pass to any of the API call functions.\n *\n * @example\n * ```\n * const authorization = buildAuthorization({\n *   username: \"Scott\",\n *   webApiKey: \"LtjCwW16nJI7cqOyPIQtXk8v1cfF0tmO\"\n * });\n * ```\n */\nexport const buildAuthorization = (options: AuthObject): AuthObject => {\n  if (!options.username || !options.webApiKey) {\n    throw new Error(`\n      buildAuthorization() requires an object containing a\n      username and webApiKey. eg:\n\n      const authorization = buildAuthorization({\n        username: \"myUserName\",\n        webApiKey: \"myWebApiKey\"\n      })\n    `);\n  }\n\n  return options;\n};\n\n// This function simply returns what it's given, however the return\n// value has the added benefit of type safety.\n","export async function compress(obj) {\n    const stream = new Blob([JSON.stringify(obj)])\n        .stream()\n        .pipeThrough(new CompressionStream(\"gzip\"));\n\n    const blob = await new Response(stream).blob();\n    const buffer = await blob.arrayBuffer();\n\n    return btoa(String.fromCharCode(...new Uint8Array(buffer)));\n}\n\nexport async function decompress(base64) {\n    const stream = new Blob([base64decode(base64)])\n        .stream()\n        .pipeThrough(new DecompressionStream(\"gzip\"));\n\n    const blob = await new Response(stream).blob();\n    return JSON.parse(await blob.text());\n}\n\nfunction base64decode(str) {\n    const binary = atob(str);\n    const len = binary.length;\n    const bytes = new Uint8Array(new ArrayBuffer(len));\n\n    for (let i = 0; i < len; i++) {\n        bytes[i] = binary.charCodeAt(i);\n    }\n\n    return bytes;\n}\n\n","export function setOption(key, value) {\n    const options = JSON.parse(localStorage.getItem(\"options\"));\n    options[key] = value;\n    localStorage.setItem(\"options\", JSON.stringify(options));\n}\n\nexport function getOption(key) {\n    return JSON.parse(localStorage.getItem(\"options\"))[key];\n}\n\n","import { getGameInfoAndUserProgress, getAchievementUnlocks } from \"@retroachievements/api\";\nimport { getOption } from \"./options.js\";\n\nconst sleep = ms => new Promise(resolve => setTimeout(() => resolve(), ms));\n\nconst sleepBase = 200;\nconst maxTries = 5;\nlet apiFailures = 0;\n\nexport async function wait() {\n    await sleep(sleepBase * Math.pow(2, apiFailures));\n}\n\nexport function resetBackoff() {\n    apiFailures = 0;\n}\n\nfunction formatDate(date) {\n    const year = date.getUTCFullYear();\n    const month = String(date.getUTCMonth() + 1).padStart(2, \"0\");\n    const day = String(date.getUTCDate()).padStart(2, \"0\");\n\n    switch (getOption(\"dateFormat\")) {\n        case 0:\n            return `${year}-${month}-${day}`;\n        case 1:\n            return `${month}/${day}/${year}`;\n        case 2:\n            return `${day}/${month}/${year}`;\n        case 3:\n            return `${month}-${day}-${year}`;\n        case 4:\n            return `${day}-${month}-${year}`;\n    }\n}\n\nexport async function checkGame(auth, username, id, startDate, endDate) {\n    let result;\n    for (let i = 0;; i++) {\n        try {\n            result = await getGameInfoAndUserProgress(auth, {\n                username,\n                gameId: id,\n                shouldIncludeHighestAwardMetadata: true,\n            });\n        } catch (e) {\n            apiFailures += 1;\n            await wait();\n            if (i < maxTries) continue;\n        }\n\n        break;\n    }\n\n    let status = \"failure\";\n    switch (result.highestAwardKind) {\n        case \"mastered\":\n            status = \"success mastered\";\n            break;\n        case \"beaten-hardcore\":\n            status = \"success\";\n            break;\n        default:\n            break;\n    }\n\n    const awardDate = new Date(result.highestAwardDate);\n    if (awardDate < startDate || awardDate > endDate) {\n        status = \"failure\";\n    }\n\n    const timestamp = result.highestAwardDate ? formatDate(awardDate) : \"N/A\";\n\n    const alt = document.getElementById(\"altUsername\").value;\n    if (username != alt && alt.length && status == \"failure\") {\n        const altResult = await checkGame(auth, alt, id, startDate);\n        if (altResult.status.includes(\"success\")) {\n            altResult.status += \" alt\";\n            return altResult;\n        }\n    }\n\n    return {\n        status,\n        title: result.title,\n        icon: result.imageIcon,\n        timestamp,\n    }\n}\n\nexport async function checkAchievement(auth, username, id, startDate, endDate) {\n    let info, game;\n    for (let i = 0;; i++) {\n        try {\n            info = await getAchievementUnlocks(auth, { count: 1, achievementId: id });\n            game = await getGameInfoAndUserProgress(auth, {\n                username,\n                gameId: info.game.id,\n                shouldIncludeHighestAwardMetadata: false,\n            });\n        } catch (e) {\n            apiFailures += 1;\n            await wait();\n            if (i < maxTries) continue;\n        }\n\n        break;\n    }\n\n    const achievement = game.achievements[info.achievement.id];\n    const unlocked = achievement.dateEarnedHardcore != \"\";\n    const unlockedDate = unlocked ? new Date(achievement.dateEarnedHardcore) : new Date(0);\n\n    const result = {\n        status: unlocked && (unlockedDate >= startDate && unlockedDate <= endDate) ? \"success\" : \"failure\",\n        timestamp: unlocked ? formatDate(unlockedDate) : \"N/A\",\n        title: info.achievement.title,\n        icon: `/Badge/${achievement.badgeName}.png`,\n    }\n\n    if (result.status == \"failure\") {\n        const alt = document.getElementById(\"altUsername\").value;\n        if (alt.length && alt != username) {\n            const altResult = await checkAchievement(auth, alt, id, startDate, endDate);\n            if (altResult.status == \"success\") {\n                altResult.status += \" alt\";\n                return altResult;\n            }\n        }\n    }\n\n    return result;\n}\n","import { buildAuthorization } from \"@retroachievements/api\";\nimport { compress, decompress } from \"./compression.js\";\nimport { getOption, setOption } from \"./options.js\";\nimport * as api from \"./api.js\";\nimport \"./css/style.css\";\n\nfunction html(literals, ...expr) {\n    let string = \"\";\n\n    for (const [index, literal] of literals.entries()) {\n        string += literal;\n        if (index in expr) string += expr[index];\n    }\n\n    return string;\n}\n\nfunction resetDatePicker() {\n    let now = new Date();\n    document.getElementById(\"startdate\").valueAsDate = new Date(\n        now.getUTCFullYear(),\n        now.getUTCMonth(),\n        1\n    );\n    document.getElementById(\"enddate\").valueAsDate = now;\n}\nresetDatePicker();\n\nlet params = new URL(window.location).searchParams;\nif (params.has(\"data\")) {\n    let data = null;\n    if (params.has(\"c\") && params.get(\"c\") == \"0\") {\n        data = JSON.parse(atob(params.get(\"data\")));\n    } else {\n        data = await decompress(params.get(\"data\"));\n    }\n    const startDate = document.getElementById(\"startdate\").value;\n    const endDate = document.getElementById(\"enddate\").value;\n\n    document.getElementById(\"username\").value = data.username ?? \"\";\n    document.getElementById(\"altUsername\").value = data.alt ?? \"\";\n    document.getElementById(\"startdate\").value = data.startDate ?? startDate;\n    document.getElementById(\"enddate\").value = data.endDate ?? endDate;\n    document.getElementById(\"submission\").value = data.submission ?? \"\";\n    document.getElementById(\"optionCheckDate\").checked = data.optionCheckDate ?? true;\n}\n\nasync function getAuthorization() {\n    if (!localStorage.getItem(\"auth\")) {\n        return await showAuthModal();\n    } else {\n        const obj = JSON.parse(localStorage.getItem(\"auth\"));\n        if (\"apikey\" in obj) {\n            obj.webApiKey = obj.apikey;\n            delete obj.apikey;\n            localStorage.setItem(\"auth\", JSON.stringify(obj));\n        }\n        const auth = buildAuthorization(obj);\n        auth.toString = function() {\n            return `z=${this.username}&y=${this.webApiKey}`;\n        }\n        return auth;\n    }\n}\n\nfunction showAuthModal() {\n    let template = document.getElementById(\"authModalTemplate\");\n    let modal = template.content.cloneNode(true);\n    let button = modal.children[0].querySelector(\"button\");\n    document.body.appendChild(modal);\n\n    return new Promise(resolve => {\n        button.addEventListener(\"click\", ev => {\n            let modal = document.querySelector(\"div.authModal\");\n            let auth = {\n                username: modal.querySelector(\"input[name='username']\").value,\n                webApiKey: modal.querySelector(\"input[name='apikey']\").value,\n            };\n            if (modal.querySelector(\"input[name='saveinfo']\").checked) {\n                localStorage.setItem(\"auth\", JSON.stringify(auth));\n            }\n            document.body.removeChild(modal);\n            resolve(buildAuthorization(auth));\n        });\n    });\n}\n\ndocument.getElementById(\"verify\").addEventListener(\"click\", async () => {\n    const auth = await getAuthorization();\n    const username = document.getElementById(\"username\");\n    const altUsername = document.getElementById(\"altUsername\");\n    const submission = document.getElementById(\"submission\");\n    const startDate = document.getElementById(\"startdate\");\n    const endDate = document.getElementById(\"enddate\");\n\n    api.resetBackoff();\n\n    if (startDate.value == \"\") {\n        startDate.style.backgroundColor = \"red\";\n        startDate.addEventListener(\"focus\", () => startDate.style.backgroundColor = \"revert\", { once: true });\n        return;\n    }\n\n    const games = Array.from(\n        submission.value.matchAll(\"https://(?:www.)?retroachievements.org/game/([0-9]+)\")\n    ).map(([_, id]) => id);\n\n    const achievements = Array.from(\n        submission.value.matchAll(\"https://(?:www.)?retroachievements.org/achievement/([0-9]+)\")\n    ).map(([_, id]) => id);\n\n    switchToTab(\"output\");\n    username.disabled = true;\n    altUsername.disabled = true;\n    startDate.disabled = true;\n    endDate.disabled = true;\n\n    output.innerHTML = html`\n        <h1>Games</h1><hr />\n        ${games.map(id => html`<div class=\"game\">\n            <div class=\"icon\"></div>\n            <a class=\"title\" href=\"https://retroachievements.org/game/${id}\">${id}</a>\n            <span class=\"timestamp\"></span>\n            <div class=\"status\">?</div>\n        </div>`).join(\"\")}\n\n        <h1>Achievements</h1><hr />\n        ${achievements.map(id => html`<div class=\"achievement\">\n            <div class=\"icon\"></div>\n            <a class=\"title\" href=\"https://retroachievements.org/achievement/${id}\">${id}</a>\n            <span class=\"timestamp\"></span>\n            <div class=\"status\">?</div>\n        </div>`).join(\"\")}\n    `;\n\n    const render = async (elem, func) => {\n        const id = elem.querySelector(\".title\").textContent;\n        // add one day to end date to account for it being unlocked during that day\n        const end = endDate.valueAsDate;\n        end.setDate(end.getDate() + 1);\n        const obj = await func(auth, username.value, id, startDate.valueAsDate, end);\n        const statusElem = elem.querySelector(\".status\")\n        statusElem.classList.add(...obj.status.split(\" \"));\n        statusElem.textContent = obj.status.includes(\"success\") ?\n            obj.status.includes(\"alt\") ? \"A\" : \"✓\" : \"X\";\n\n        const img = document.createElement(\"img\");\n        img.src = `https://media.retroachievements.org${obj.icon}`;\n        elem.querySelector(\".icon\").appendChild(img);\n\n        elem.querySelector(\".title\").textContent = obj.title;\n        elem.querySelector(\".timestamp\").textContent = obj.timestamp;\n    };\n\n    for (const elem of output.querySelectorAll(\".game\")) {\n        await render(elem, api.checkGame);\n        await api.wait();\n    }\n\n    for (const elem of output.querySelectorAll(\".achievement\")) {\n        await render(elem, api.checkAchievement);\n        await api.wait();\n    }\n\n    username.disabled = false;\n    altUsername.disabled = false;\n    startDate.disabled = false;\n    endDate.disabled = false;\n});\n\ndocument.getElementById(\"clear\").addEventListener(\"click\", () => {\n    document.getElementById(\"username\").value = \"\";\n    document.getElementById(\"submission\").value = \"\";\n    document.getElementById(\"output\").innerHTML = \"\";\n    document.getElementById(\"username\").disabled = false;\n    document.getElementById(\"startdate\").disabled = false;\n    switchToTab(\"submission\");\n});\n\ndocument.getElementById(\"optionResetAuth\").addEventListener(\"click\", () => {\n    localStorage.removeItem(\"auth\");\n});\n\ndocument.getElementById(\"optionExportURL\").addEventListener(\"click\", async () => {\n    const username = document.getElementById(\"username\").value;\n    const alt = document.getElementById(\"altUsername\").value;\n    const startDate = document.getElementById(\"startdate\").value;\n    const endDate = document.getElementById(\"enddate\").value;\n    const submission = document.getElementById(\"submission\").value;\n    const optionCheckDate = document.getElementById(\"optionCheckDate\").checked;\n\n    const data = await compress({\n        username, alt, startDate, endDate, submission, optionCheckDate\n    });\n\n    const url = new URL(window.location.href);\n    url.searchParams.set(\"data\", data);\n    window.location.href = url.href;\n});\n\ndocument.getElementById(\"optionCheckDate\").addEventListener(\"change\", ev => {\n    const datePicker = document.getElementById(\"startdate\");\n    if (ev.target.checked) {\n        datePicker.disabled = false;\n        resetDatePicker();\n    } else {\n        datePicker.disabled = true;\n        datePicker.valueAsDate = new Date(0);\n    }\n});\n\ndocument.getElementById(\"optionDateFormat\").addEventListener(\"change\", ev => {\n    setOption(\"dateFormat\", ev.target.selectedIndex);\n});\n\nif (!localStorage.getItem(\"options\")) {\n    localStorage.setItem(\"options\", JSON.stringify({\n        dateFormat: 0,\n    }));\n} else {\n    const options = JSON.parse(localStorage.getItem(\"options\"));\n    document.getElementById(\"optionDateFormat\").selectedIndex = options.dateFormat;\n}\n\nfor (const elem of document.querySelectorAll(\"#tabs > div\")) {\n    const target = elem.dataset.target;\n    elem.addEventListener(\"mousedown\", () => {\n        switchToTab(target);\n    });\n}\n\nfunction switchToTab(name) {\n    document.getElementById(name).style.display = \"block\";\n    for (const elem of document.querySelectorAll(`#content > :not(#${name})`)) {\n        elem.style.display = \"none\";\n    }\n    for (const elem of document.querySelectorAll(\"#tabs > div\")) {\n        elem.classList.remove(\"selected\");\n        if (elem.dataset.target == name) {\n            elem.classList.add(\"selected\");\n        }\n    }\n}\n\n"]}